AbortingDueToDynamicUpdateFailure=WorkflowApplication 已中止，因为实例更新尝试失败。
AbortingDueToInstanceTimeout=由于工作流实例执行超时，因此将其中止。
AbortingDueToLoadFailure=由于 Load 或 LoadRunnableInstance 操作引发异常，WorkflowApplication 已中止。创建新的 WorkflowApplication 对象以尝试加载另一个工作流实例。
AbortingDueToVersionMismatch=WorkflowApplication 已中止，因为 Load 或 LoadRunnableInstance 操作引发了 VersionMismatchException。
AbortInstanceOnTransactionFailureDoesNotMatch=嵌套于 TransactedReceiveScope 活动“{1}”中的 TransactionScope 活动“{0}”的 AbortInstanceOnTransactionFailure 属性的值不应设置为 false。
ActionItemCallbackInvoked=已调用 IO 线程调度程序回调。
ActionItemIsAlreadyScheduled=ActionItem 已计划执行，还未完成。
ActionItemScheduled=已调用 IO 线程调度程序回调。
ActivityBlockingUpdate=活动“{0}”: {1}
ActivityCannotBeReferenced=活动“{1}”不能引用活动“{0}”，因为工作流中的其他位置已引用活动“{0}”，且活动“{1}”看不到该引用。若要使活动“{0}”可供活动“{1}”看到，前者必须为活动“{2}”的子级或导入的子级(但不是实现子级)。活动“{0}”最初由活动“{3}”引用，而活动“{1}”位于活动“{2}”的实现中。
ActivityCannotBeReferencedWithoutTarget=活动“{1}”无法引用活动“{0}”，因为前者不在另一个活动的实现中。仅当活动 1 将活动 2 指定为子级或导入时，活动 1 的实现才能引用活动 2。活动“{0}”是由活动“{2}”声明的。
ActivityCannotReferenceItself=显示名称为“{0}”的活动尝试引用自身。活动不能是其自身的父级。
ActivityCompleted=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”在“{3}”状态下完成。
ActivityDefinitionCannotBeShared=工作流中多个节点之间似乎共享了“{0}”的活动定义对象。在工作流中重用活动定义对象是不正确的做法。
ActivityDelegateAlreadyOpened=ActivityDelegate“{0}”的父级已经为活动“{1}”，因此其父级不能为活动“{2}”。委托只能作为子级返回一次。
ActivityDelegateCannotBeReferenced=活动“{1}”无法引用带有处理程序“{0}”的活动委托，因为前者不在活动“{2}”的实现中。仅当活动将活动委托指定为子级或导入时，该活动的实现才能引用该活动委托。具有处理程序“{0}”的活动委托是由活动“{3}”声明的。
ActivityDelegateCannotBeReferencedNoHandler=活动“{0}”无法引用无处理程序的活动委托，因为前者不在活动“{1}”的实现中。仅当活动将活动委托指定为子级或导入时，该活动的实现才能引用该活动委托。无处理程序的活动委托是由活动“{2}”声明的。
ActivityDelegateCannotBeReferencedWithoutTarget=活动“{1}”无法引用具有处理程序“{0}”的活动委托，因为前者不在另一个活动的实现中。仅当活动将活动委托指定为子级或导入时，该活动的实现才能引用该活动委托。具有处理程序“{0}”的活动委托是由活动“{2}”声明的。
ActivityDelegateCannotBeReferencedWithoutTargetNoHandler=活动“{0}”无法引用无处理程序的活动委托，因为前者不在另一个活动的实现中。仅当活动将活动委托指定为子级或导入时，该活动的实现才能引用该活动委托。无处理程序的活动委托是由活动“{1}”声明的。
ActivityDelegateHandlersMustBeDeclarations=ActivityDelegate、ActivityAction 或 ActivityFunc 的处理程序不可以是对树中现有活动的引用。“{2}”已经引用了父级为“{1}”的委托的处理程序活动“{0}”。
ActivityDelegateNotOpened=ActivityDelegate“{0}”未处于打开状态。
ActivityDelegateOwnerEnvironmentMissing=未找到活动“{0}”中声明活动委托“{1}”的位置环境。
ActivityDelegateOwnerMissing=应为 ActivityDelegate“{0}”指定一个所有者工作流元素。
ActivityDelegateOwnerNotInParentScope=当前正在执行的活动“{1}”的父层次结构中，没有找到声明 ActivityDelegate“{0}”的 Activity。
ActivityFailedToOpenBefore=由于此活动以前未能打开，因此现在无法打开它。
ActivityHasNoImplementation=活动“{0}”包含一个实现映射，但没有实现。
ActivityInstanceFixupFailed=工作流加载失败。给定的 Activity 树与此实例不兼容。
ActivityIsNotRoot=此参数需要是工作流定义的根。
ActivityIsUncached=仅在对工作流定义调用 CacheMetadata 后才能调用此方法。
ActivityMapIsCorrupt=在持久化实例中，从活动程序到实例的映射已损坏。
ActivityNotFound=找不到活动“{0}”。
ActivityNotICompiledExpressionRoot=活动必须为 ICompiledExpressionRoot 才能确定表达式 ID。请确保已编译当前定义。
ActivityNotPartOfThisTree=处理所提供活动的元数据时，此活动不是工作流定义的一部分。名为“{0}”的有问题的活动是由名为“{1}”的活动提供的。
ActivityPropertyMustBeSet=“{0}”是活动“{1}”的必备属性。
ActivityPropertyNotSet=活动“{1}”的“{0}”属性为 null，它将不执行任何操作。
ActivityPropertyRequiresName=对于 DynamicActivity“{0}”上的每个 ActivityProperty，“Name”都是必要属性。
ActivityPropertyRequiresType=对于 DynamicActivity“{0}”上的每个 ActivityProperty，“Type”都是必要属性。
ActivityScheduled=父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了子 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
ActivityTypeMismatch=“{0}”的类型不是“{1}”。加载此实例时，必须确保名为“{0}”的活动实现“{1}”。
ActivityXamlServiceLineString=行
ActivityXamlServicesCompilationFailed=发生了编译失败: {0}完整的结果包含在此异常的 Data 属性中。请更正源中的错误，然后重试加载。
ActivityXamlServicesRequiresActivity=ActivityXamlServices.Load 仅支持基于 Activity 的类型。提供的类型({0})无效。
AddedIdleArgumentBlockDU=新添加的参数“{0}”对应的表达式包含活动“{1}”，此活动会在执行过程中空闲。若要在此活动内部启用动态更新，请使用保证不会空闲的参数表达式。
AddedIdleExpressionBlockDU=已添加的新变量默认表达式或参数表达式在执行过程中会空闲。
AddedIdleVariableDefaultBlockDU=新添加的变量“{0}”对应的默认表达式包含活动“{1}”，此活动在执行过程中会空闲。若要在此活动内部启用动态更新，请使用保证不会空闲的变量默认表达式。
AddMatchActivityNewAndOldParentMismatch=无法将新活动“{0}”与旧活动“{1}”匹配，因为它们的声明不匹配。新活动由“{2}”声明，而旧活动由“{3}”声明。
AddMatchActivityNewParentMismatch=活动“{0}”不能为活动“{1}”添加匹配项，因为前者不是后者的声明者。匹配的活动由“{2}”声明。
AddMatchActivityPrivateChild=无法为活动“{0}”添加匹配项，因为它是私有子级。只能为公共子级添加匹配项。
AddMatchVariableNewAndOldParentMismatch=无法将新变量“{0}”与旧变量“{1}”匹配，因为它们的所有者不匹配。新变量由“{2}”所有，而旧变量由“{3}”所有。
AddMatchVariableNewParentMismatch=活动“{0}”不能为变量“{1}”添加匹配项，因为前者不是后者的所有者。匹配的变量由“{2}”所有。
AddMatchVariablePrivateChild=无法为变量“{0}”添加匹配项，因为它是私有的。只能为公共变量添加匹配项。
AddMatchVariableSignatureMismatch=活动“{0}”无法添加变量匹配项，因为两个变量的签名不匹配。包括名称、类型和修改者的签名必须匹配。新变量的名称、类型和修改者分别为 {1}、{2} 和 {3}。旧变量的名称、类型和修改者分别为 {4}、{5} 和 {6}。
AddValidationErrorMustBeCalledFromConstraint=只能从 {0} 活动的子树中调用 AddValidationError。
AECDisposed=访问 ActivityContext 的操作只能从其所传入的函数的作用域内进行。
AECForPropertiesHasBeenDisposed=创建了此 ExecutionProperties 对象的 ActivityContext 已得到处置。只有在活动的工作项过程中才能访问属性。
AlreadyBoundToInstance=实例永久性系统无法处理无效的 InstancePersistenceCommand。该命令需要未绑定的句柄，但 InstanceHandle 已绑定到某个实例。
AlreadyBoundToOwner=实例永久性系统无法处理无效的 InstancePersistenceCommand。该命令需要未绑定的句柄，但 InstanceHandle 已绑定到某个实例所有者。
AlreadySetupNoPersist=此工作流元素已经设置了一个非永久性块。工作流元素只能设置一个非永久性块。
AmbiguousVBVariableReference=“{0}”是不明确的变量引用。VisualBasic 标识符不区分大小写。
AppDomainUnload=AppDomain 正在卸载。AppDomain.FriendlyName {0}，ProcessName {1}，ProcessId {2}。
ArgumentAlreadyInitialized=活动“{1}”的参数“{0}”应由动态更新添加，但已初始化。
ArgumentAlreadyInUse=参数“{0}”正由 Activity“{1}”使用，因此不能再由 Activity“{2}”使用。
ArgumentCannotHaveNullOrVoidType=DisplayName 为“{0}”的 Activity 有一个名为“{1}”的参数，该参数为 null 或 void 类型。
ArgumentDirectionMismatch=由于方向不匹配，因此无法绑定为 RuntimeArgument“{0}”提供的 Argument。RuntimeArgument 声明方向为 {1}，而 Argument 的方向为 {2}。
ArgumentDoesNotExist=此集合中不存在名为“{0}”的参数。
ArgumentDoesNotExistInEnvironment=当前的环境范围中不存在参数“{0}”。
ArgumentIsAddedMoreThanOnce=在 Activity“{1}”中不止一次添加了参数“{0}”。
ArgumentLocationExpressionTypeMismatch=Expression 的类型必须为“{0}”，但提供的类型为“{1}”。
ArgumentMustbePropertyofWorkflowElement=参数必须是 WorkflowElement 的某个属性。
ArgumentNameRequired=必须设置 ArgumentReference 或 ArgumentValue 的参数名称。
ArgumentNotFound=在拥有这些私有子级的活动上找不到名为“{0}”的参数。只应在 Activity 定义的正文中使用 ArgumentReference 和 ArgumentValue。
ArgumentNotInTree=无法使用类型为“{0}”的参数。请确保在活动中声明了该参数。
ArgumentNullOrEmpty=参数 {0} 为 null 或为空。
ArgumentNumberRequiresTheSameAsParameterNumber=类型为“{0}”的实参数量和形参数量必须相同。
ArgumentRequired=“{1}”的“{0}”集合中的参数必须有内容。
ArgumentTypeCannotBeNull=参数类型不能为 null。
ArgumentTypeMismatch=无法绑定为 RuntimeArgument“{0}”提供的 Argument，因为类型不匹配。RuntimeArgument 声明的类型为 {1}，而 Argument 的类型为 {2}。两种类型必须相同。
ArgumentTypeMustBeCompatible=参数类型必须与此 ArgumentReference 或 ArgumentValue 的类型兼容。参数“{0}”的类型为 {1}，但类型应为 {2}。
ArgumentValueExpressionTypeMismatch=参数要求 ResultType 为“{0}”，但所提供 Activity 的结果类型为“{1}”。
ArgumentViolationsFound=“{0}”活动中发现了冲突。发现了一个或多个冲突，如下所示:    {1}
AssemblyReferenceIsImmutable=不能更改内置的默认 AssemblyReferences。
AsyncCallbackThrewException=异步回调引发了异常。
AsyncEventArgsCompletedTwice=AsyncEventArgs 实现“{0}”多次尝试完成同一个操作。这可能是由不正确的应用程序 AsyncEventArgs 实现或其他多次调用 AsyncCallback 的扩展性代码所致。
AsyncEventArgsCompletionPending=AsyncEventArgs 实现“{0}”在没有完成挂起操作的情况下多次尝试将状态设置为“挂起”。这可能是由不正确的应用程序 AsyncEventArgs 实现或其他多次调用 Set() 的扩展性代码所致。
AsyncMethodsMustAllBeStaticOrInstance=异步方法必须全部为静态方法或全部为实例方法。
AsyncMethodsMustFromSameType=异步方法必须来自同一个类型。
AsyncResultAlreadyEnded=不能对 AsyncResult 调用两次 End。
AsyncResultCompletedTwice=IAsyncResult 实现“{0}”多次尝试完成同一个操作。这可能是由不正确的应用程序 IAsyncResult 实现或其他扩展性代码所致，例如，返回不正确 CompletedSynchronously 值或多次调用 AsyncCallback 的 IAsyncResult。
AsyncTransactionException=用于将事务输入异步操作的 TransactionScope 引发了异常。
BadCopyToArray=无法将目录项复制到指定的数组中。发生此情况是因为一个或多个以下错误: 数组的维度过多，索引超过了数组的结尾，数组没有足够的空间。
BadWorkflowIdentityFormat=无效的 WorkflowIdentity 格式。WorkflowIdentity 必须遵循“name; Version=version; Package=package”格式。Version 和 Package 部分是可选的。
BeforeInitializeComponentXBTExtensionResourceNotFound=未找到应由 BeforeInitializeComponent XAML 生成任务扩展生成的资源。请尝试重新生成项目。
BeginExecuteMustNotReturnANullAsyncResult=AsyncCodeActivity.BeginExecute 返回的 IAsyncResult 不得为 Null。
BeginExecuteMustUseProvidedStateAsAsyncResultState=AsyncCodeActivity.BeginExecute 必须返回 IAsyncResult，且其 IAsyncResult.AsyncState 必须为运行时提供的状态对象。
BinaryExpressionActivityRequiresArgument=必须设置 {0}，然后才能使用 {1} 活动“{2}”。
BindLockRequiresCommandFlag=所用 InstanceStore 的永久性提供程序实现无效。该实现在无效的时间调用了 BindAcquiredLock、BindReclaimedLock、BeginBindReclaimedLock 或 CreateBindReclaimedLockException。这些方法只能在处理可能获取实例锁的命令期间调用。请切换到有效的永久性提供程序，或是重写 InstancePersistenceCommand 实现以从 AutomaticallyAcquiringLock 返回 true。
BindReclaimedLockException=此异常不表示错误，不应捕获。此异常可从 InstanceStore.TryCommand、BeginTryCommand 或 EndTryCommand 的永久性提供程序实现引发，指示应尝试回收在 InstancePersistenceContext.CreateBindReclaimedLockException 调用中指定的版本上的锁。
BindReclaimSucceeded=InstanceStore 的永久性提供程序实现已成功取消了该命令。已通过 InstancePersistenceContext.CreateBindReclaimedLockException 回收了一个孤立锁并取消了该命令。
BlockedUpdateInsideActivityUpdateByUserError=更新作者不允许在此正在运行的活动内部更新。
BlockedUpdateInsideActivityUpdateError=已阻止对此活动进行动态更新。
BodyCannotBeNull=消息描述的正文不能为 null，请将 OperationDescription.MessageDescription.Body 设置为正确值。
BookmarkAlreadyExists=已存在名为“{0}”的书签。
BookmarkNotFoundGeneric=无法找到所请求的书签。
BookmarkNotRegistered={0} 书签当前未在补偿扩展中注册。
BookmarkScopeAlreadyInitialized=无法初始化书签范围，因为它已经过初始化。
BookmarkScopeHasBookmarks=无法注销指定的书签范围，因为它具有未处理的书签。
BookmarkScopeInitialized=TemporaryId 为“{0}”的 BookmarkScope 已初始化，ID 为:“{1}”。
BookmarkScopeNotFound=找不到 ID 为“{0}”的书签范围。
BookmarkScopeNotRegisteredForInitialize=无法初始化指定的书签范围，因为它当前未注册。
BookmarkScopeNotRegisteredForUnregister=无法注销指定的书签范围，因为它当前未注册。
BookmarkScopesRequireKeys=书签范围需要支持密钥管理的主机。现正使用的主机不支持密钥管理。如果正在使用 WorkflowApplication 或 WorkflowInvoker，请考虑改用 WorkflowServiceHost。
BookmarkScopeWithIdAlreadyExists=无法用标识符“{0}”初始化指定的书签范围，因为已存在具有相同标识符的书签范围。
BookmarksOnlyResumableWhileIdle=只有运行时空闲时才能调用 TryScheduleBookmarkResumption。
BufferAllocationFailed=无法分配 {0} 字节的托管内存缓冲区。可用内存量可能不足。
BufferedOutputStreamQuotaExceeded=已超出此流的大小配额({0})。
BufferedReceiveBehaviorMultipleUse=无法将 BufferedReceiveServiceBehavior 实例添加到 WorkflowServiceHost，因为已将其添加到了另一个 WorkflowServiceHost 实例。为每个其他 WorkflowServiceHost 创建一个新的 BufferedReceiveServiceBehavior 实例。
BufferedReceiveBehaviorUsedWithoutProperty=BufferedReceiveServiceBehavior 必须与支持 BufferedReceive 处理的工作流定义配合使用。使用 WorkflowService.AllowBufferedReceive 可以启用 BufferedReceive 处理。
BufferedReceiveRequiresReceiveContext=必须启用名为“{0}”的操作，才能在使用 BufferedReceiveServiceBehavior 时使用 ReceiveContext ManualAcknowledgement 模式。
BufferIsNotRightSizeForBufferManager=由于大小错误，无法将此缓冲区返回到缓冲区管理器。
BufferOutOfOrderMessageNoBookmark=此时不能执行服务实例“{0}”上的操作“{1}”。服务实例准备好处理此特定操作时，将进行另一个尝试。
BufferOutOfOrderMessageNoInstance=此时不能执行操作“{0}”。服务实例准备好处理此特定操作时，将进行另一个尝试。
BufferPoolAllocation=池正在分配 {0} 个字节。
BufferPoolChangeQuota=BufferPool 的大小为 {0}，按 {1} 更改配额。
BusyCountTraceFormatString=工作流实例 Id {0}
CacheRootMetadataStart=已在活动“{0}”上启动 CacheRootMetadata
CacheRootMetadataStop=已在活动 {0} 上停止 CacheRootMetadata。
CacheSettingsLocked=缓存设置是不可变的，因为已将扩展添加到工作流实例或主机扩展集合。
CallbackExceptionFromHostAbort=对 WorkflowInstance“{0}”调用 OnRequestAbort 引发异常。此异常被视为致命异常。有关详细信息，请参见内部异常。
CallbackExceptionFromHostGetExtension=对 WorkflowInstance“{0}”调用 OnGetExtension 引发异常。此异常被视为致命异常。有关详细信息，请参见内部异常。
CancellationHandlerFatalException=“{0}”的取消处理程序引发了未经处理的异常。取消可能处于不一致状态，工作流已中止。
CanInduceIdleActivityInArgumentExpression=活动“{1}”的参数“{0}”已绑定到包含活动“{2}”的表达式。“{2}”可能导致表达式在求值期间处于空闲状态。如果活动“{1}”的参数表达式修改共享状态，则在表达式求值期间变为空闲状态可能会生成意外的参数值。
CanInduceIdleNotSpecified=活动“{0}”无效。对于 NativeActivity 派生的活动，若其调用 System.Activities.NativeActivityContext 中定义的某个 CreateBookmark 重载，以便执行异步操作，则必须覆盖 CanInduceIdle 属性且返回 true。
CannotAcquireLockDefault=InstancePersistenceCommand 的执行已中断，因为有其他实例所有者锁定了该实例。发生此错误的原因通常是其他主机加载了该实例。
CannotAcquireLockSpecific=InstancePersistenceCommand 的执行已中断，因为有其他实例所有者锁定了实例“{0}”。发生此错误的原因通常是其他主机加载了该实例。
CannotAcquireLockSpecificWithOwner=InstancePersistenceCommand 的执行已中断，因为有其他实例所有者锁定了实例“{0}”。发生此错误的原因通常是其他主机加载了该实例。在该实例上持有锁的所有者或主机的实例所有者 ID 为“{1}”。
CannotAddHandlesUpdateError=该活动已添加一个派生自 Handle 的类型的新变量。
CannotAddOrRemoveWithChildren=具有执行子级的活动无法添加或移除工作流执行属性。
CannotCallAbortInstanceFromWorkflowThread=从工作流线程中无法调用 AbortInstance，因为它可能会导致不一致的状态。
CannotChangeAbortInstanceFlagAfterPropertyRegistration=执行相应 RuntimeTransactionHandle 的 IPropertyRegistrationCallback.Register 后，无法修改 AbortInstanceOnTransactionFailure 标志的值。
CannotChangeMatchesInImplementation=无法在要对其生成更新映射的工作流的私有实现内部添加新匹配项。
CannotCompleteRuntimeOwnedTransaction=当前事务由运行时配置，并且只能由运行时完成。存在环境事务的同时对 WorkflowInvoker 调用 invoke API，通常会得到由运行时配置的事务。
CannotCompleteWithKeys=所用 InstanceStore 的永久性提供程序实现无效。该实现报告，要完成的实例与活动键关联。仅当与实例关联的所有键都完成以后，才能完成该实例。
CannotConvertObject=不能将对象“{0}”转换为类型“{1}”。
CannotCreateContextWithNullId=InstanceStore.CreateInstanceHandle 的参数 InstanceID 无法指定全零的 ID，如 Guid.Empty。
CannotCreateMessageFault=无法创建 MessageFault。
CannotCreateOwnerWithoutIdentity=无法创建没有 WorkflowIdentity 的默认实例所有者。若要创建所有者，请指定定义标识或选择 WorkflowIdentityFilter.Any。
CanNotDefineNullForAPromotion=提升名称 {1} 的 {0} 提升集合包含 null 值。
CannotDereferenceNull=无法从具有属性“{0}”的给定表达式中创建左值，因为目标对象为 null。
CannotEnlistMultipleTransactions=在工作流中已登记了事务。一次只能登记一个事务。
CanNotFindSymbolResolverInWorkflowInstanceExtensions=工作流实例扩展集合中找不到符号解析器。
CannotGenerateSchemaForXmlSerializable=“{0}”是内部运行时数据，不支持生成架构。
CannotGetValueOfOutArgument=对于仅提供 out 方向的参数，无法获取其值。
CannotInvokeBindingFromNonBinding=所用 InstanceStore 的永久性提供程序实现无效。该实现试图在处理不获取锁的命令时执行可能获取锁的命令。如果在处理从 InstancePersistenceCommand.AutomaticallyAcquiringLock 返回 false 的命令时，使用从其返回 true 的命令调用 InstancePersistenceContext.Execute 或 InstancePersistenceContext.BeginExecute，则可能发生此异常。请使用不会产生这种行为的永久性提供程序，或重写其中一个命令的 AutomaticallyAcquiringLock，以返回正确的值。
CannotInvokeOpenedActivity=无法调用此活动，因为打开它的不是接受字符串和对象的 IDictionary 的 Invoke 重载。
CannotInvokeTransactionalFromNonTransactional=所用 InstanceStore 的永久性提供程序实现无效。该实现试图在处理非事务性命令时执行事务性命令。如果在处理从 InstancePersistenceCommand.IsTransactionEnlistmentOptional 返回 true 的命令时，使用从其返回 false 的命令调用 InstancePersistenceContext.Execute 或 InstancePersistenceContext.BeginExecute，则可能发生此异常。请使用不会产生这种行为的永久性提供程序，或重写其中一个命令的 IsTransactionEnlistmentOptional，以返回正确的值。
CannotModifyCatchAfterOpen=此 Catch 已打开，无法修改。只能在设计时修改 Catch。
CannotMoveChildAcrossDifferentFlowNodeTypes=子活动从一个 FlowNode 类型移动到不同的 FlowNode 类型时，流程图不支持动态更新。
CannotNestTransactedReceiveScopeWhenAmbientHandleIsSuppressed=当前已禁止运行时事务。不支持在禁止运行时事务时执行 TransactedReceiveScope 活动“{0}”。
CannotNestTransactionScopeWhenAmbientHandleIsSuppressed=当前已禁止运行时事务。不支持在禁止运行时事务期间执行 TransactedScope 活动“{0}”。
CannotPerformOperationFromHandlerThread=无法从事件处理程序内执行 WorkflowApplication 操作。
CannotPerformOperationOnHandle=无法对 Handle 子类型的变量执行操作。
CannotPersistInsideIsolation=隔离块内不能包含 Persist 活动。
CannotPersistInsideNoPersist=非永久性块内不能包含 Persist 活动。
CannotPersistWhileDetached=实例无法持久化，因为它不拥有锁。前一次以 true 的 unlock 值调用 Persist 负责释放锁。
CannotPromoteAsSqlVariant=SQL 不支持已提升属性“{1}”的数据类型“{0}”。请将该数据类型更改为支持的数据类型，或将该属性提升为二进制值。
CannotPromoteXNameTwiceInPromotion=在提升“{1}”中，XName“{0}”已提升多次。同一提升中不允许有重复的 XName。
CannotPropagateExceptionWhileCanceling=ID 为 {1} 的活动“{0}”在取消时引发或传播了异常。
CannotRemoveExecutingActivityUpdateError=无法移除活动“{0}: {1}”，因为它当前正在执行。
CannotReplaceTransaction=环境事务(System.Transactions.Transaction.Current)与正用于此执行阶段的事务不匹配。在整个执行阶段中只能使用一个事务。
CannotResetPropertyInDataContext=无法重置 WorkflowDataContext 中的属性。
CannotSaveOriginalValueForActivity=活动只能保存其公共或导入的子级或委托处理程序的原始值。
CannotSaveOriginalValueForNewActivity=无法保存活动“{0}”的原始值，因为它不存在于原始工作流定义中。
CannotSaveOriginalValuesForReferencedChildren=此活动位于活动实现内部时无法正确处理更新。它尝试保存原始值以引用导入的子级。
CannotScheduleChildrenWhileEnteringIsolation=设置隔离块时不能安排子活动。等到调用了 OnEntered BookmarkCallback 后再安排子级。
CannotSerializeExpression=无法序列化“{0}”类型的表达式。
CannotSerializeVariableExpression=无法序列化表达式，因为变量访问子表达式格式错误或无法识别。
CannotSetRuntimeTransactionInNoPersist=包含在非永久性作用域内的活动无法使用事务来配置运行时。上级活动已经禁止永久性。
CannotSetupIsolationInsideIsolation=该隔离块可能会包含在另一个隔离块内，因此无法设置。隔离块不能嵌套。
CannotSetupIsolationInsideNoPersist=该隔离块可能会包含在非永久性块内，因此无法设置。
CannotSetupIsolationWithChildren=有执行子级就不能设置隔离块。
CannotSetValueOfInArgument=无法为 In 参数赋值。
CannotSetValueToLocation=类型为“{0}”的值不能设置为名称为“{1}”的位置，因为后者是类型为“{2}”的位置。
CannotSpecifyBothConnectionStringAndName=不能同时指定 connectionString 和 connectionStringName 属性。
CannotSuppressAlreadyRegisteredHandle=对于已注册的 RuntimeTransactionHandle，无法更改 SuppressTransaction 属性的值。
CannotUnregisterDefaultBookmarkScope=无法删除书签范围，因为它是实例的默认书签范围。
CannotUnregisterNullBookmarkScope=无法注销 null 书签范围。
CannotUpdateEnvironmentInTheMiddleOfResolvingArguments=当实例位于解析参数的中间时，无法添加、移除或重新排列参数或变量。
CannotUpdateEnvironmentInTheMiddleOfResolvingVariables=当实例位于解析变量的中间时，无法添加、移除或重新排列参数或变量。
CannotUpdateLoadedInstance=WorkflowInstance“{0}”未能得到更新，因为它已加载。请考虑在更新此实例前挂起它。
CannotUseAddServiceEndpointOverloadForWorkflowServices=WorkflowServiceHost 不支持使用 AddServiceEndpoint (ServiceEndpoint endpoint)重载添加应用程序终结点。请使用“XName serviceContractName”或“string implementedContract”重载中的一个将应用程序终结点添加到 WorkflowServiceHost。
CannotUseInputsWithLoad=工作流输入不能与 Load 或 LoadRunnableInstance 一起使用，因为它们仅提供给新实例。
CannotValidateNullObject=名为“{1}”的 {0} 的 ToValidate 参数解析为 null。必须提供非 null 对象进行验证。
CannotWaitForIdleSynchronously=操作已失败，因为该操作是在工作流非空闲时从处理程序调用的。操作要求工作流空闲才能完成，并且工作流在事件处理程序中时不能执行。
CanOnlyAbortDirectChildren=活动只能中止其直接子级。
CanOnlyCancelDirectChildren=活动只能取消其直接子级。
CanOnlyGetOwnedArguments=活动只能获取其所拥有的参数的位置。活动“{0}”正试图获取参数“{1}”的位置，但该参数归活动“{2}”所有。
CanOnlyScheduleDirectChildren=活动只能安排其直接子级。活动“{0}”正试图安排“{1}”，但后者为“{2}”的子级。
CantFindTimerExtension=必须向扩展集合添加 TimerExtension。
CatchOrFinallyExpected=TryCatch 活动“{0}”需要 Catch 或 Finally。
ChangeConditionalTransitionToUnconditionalBlockDU=如果条件转换在更新后变为无条件转换，则 StateMachine 不支持动态更新。
ChangeTransitionTypeDuringTransitioningBlockDU=如果状态正在转换并且当前转换成为条件转换，则 StateMachine 不支持动态更新。
ChangingTriggerOrUseOriginalConditionActionBlockDU=如果现有转换的触发器已修改或者 Condition 或 Action 活动已重新分配给新的转换，则 StateMachine 不支持动态更新。
CleanupInProgress=SqlWorkflowInstanceStore 无法处理命令，因为正在进行存储清理。请等待清理完成，然后重试。
CollectionActivityRequiresCollection=未初始化“{0}”的属性“Collection”。
ColumnNumberTooLarge=为活动 {0} 指定的列数过大，在部分信任环境中不受支持
CommandExecutionCannotOverlap=对于一个 InstanceHandle，一次只能执行一个命令。在前一个为此 InstanceHandle 执行的命令完成前，请勿对 InstanceStore 调用 Execute 或 BeginExecute 方法。
CompensableActivityAlreadyConfirmedOrCompensated=“Target”CompensationToken 指定的 CompensableActivity 已确认或得到补偿。
CompensableActivityInsideTransactedReceiveScope=CompensableActivity 无法嵌套在 TransactedReceiveScope 内。
CompensableActivityInsideTransactionScopeActivity=CompensableActivity 不能嵌套在 TransactionScope 活动内。
CompensateWithNoTargetConstraint=仅当在补偿、确认或取消处理程序内使用时，才能在不指定 Target 的情况下使用 Compensate。
CompensateWithoutCompensableActivity=只有在已执行工作流内的 CompensableActivity 后，才能使用 Compensate 活动“{0}”。
CompensationHandlerFatalException=“{0}”的补偿处理程序引发了未经处理的异常。补偿可能处于不一致状态，工作流已中止。
CompensationState=CompensableActivity“{0}”的状态为“{1}”。
CompiledExpressionIdNotFound=无法定位“{0}”的表达式 ID。请确保已编译当前定义。
CompiledExpressionsActivityException=TextExpressionCompiler: 处理活动“{1}”时遇到了“{0}”类型的异常:“{2}”。
CompiledExpressionsCacheMetadataException=活动“{0}”的 CacheMetadata 引发了“{1}”。
CompiledExpressionsDuplicateName=“{0}”是不明确的变量引用。请重命名标识符。
CompiledExpressionsIgnoringInvalidIdentifierVariable=TextExpressionCompiler: 将忽略变量“{0}”。标识符对于当前语言无效。
CompiledExpressionsIgnoringUnnamedVariable=TextExpressionCompiler: 将忽略未命名的变量。
CompiledExpressionsNoCompiledRoot=无法定位与活动“{0}”对应的活动实例。请重新编译工作流。
CompiledLocationNoDefaultConstructor=编译的表达式在其本地根上需要一个默认构造函数。请将默认构造函数添加到类型“{0}”。
CompiledLocationReferenceGetLocation=CompiledLocationReference 应从不用于访问位置。
CompilerError=遇到了编译器错误。
CompilerErrorSpecificExpression=处理表达式“{0}”时遇到了编译器错误。{1}
CompileVbExpressionStart=正在编译 VB 表达式“{0}”
CompileVbExpressionStop=已完成编译 VB 表达式。
CompleteBookmarkWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 BookmarkWorkItem 已经完成。BookmarkName: {3}，BookmarkScope: {4}。
CompleteCancelActivityWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 CancelActivityWorkItem 已经完成。
CompleteCompletionWorkItem=父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”已完成了 CompletionWorkItem。完成了 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
CompletedMustNotHaveAssociatedKeys=所用 InstanceStore 的永久性提供程序实现无效。该实现报告，要加载的状态为 InstanceState.Completed 的实例与未完成的键关联。
CompleteExecuteActivityWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 ExecuteActivityWorkItem 已经完成。
CompleteFaultWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 FaultWorkItem 已经完成。异常是从 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”传播的。
CompleteRuntimeWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的运行时工作项已经完成。
CompleteTransactionContextWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 TransactionContextWorkItem 已经完成。
CompletionConditionSetButNoBody=在 ParallelForEach 中，使 CompletionCondition 属性不等于 null，但 Body 属性等于 null 是无效的。请考虑将 ParallelForEach“{0}”的 Body 属性设置为空的 Sequence 活动。
ConfirmationHandlerFatalException=“{0}”的确认处理程序引发了未经处理的异常。确认可能处于不一致状态，工作流已中止。
ConfirmWithNoTargetConstraint=仅当在补偿、确认或取消处理程序内使用时，才能在不指定 Target 的情况下使用 Confirm。
ConfirmWithoutCompensableActivity=只有在已执行工作流内的 CompensableActivity 后，才能使用 Confirm 活动“{0}”。
ConflictingValueName=提供给 DurableInstanceManager.AddInstanceOwnerValues 的某个值的属性名“{0}”(XName)与已添加的某个值的名称冲突。确保传递给 AddInstanceOwnerValues 的所有值的名称都是唯一的。此错误可能是由所配置的服务行为发生冲突造成的。
ConnectionStringNameWrong=找不到连接名称“{0}”的连接字符串。
ConstructorInfoNotFound=在“{0}”类型中未找到相应的构造函数信息。
ConstVariableCannotBeSet=此位置标记为 const，因此不能修改其值。
ContextAlreadyBoundToInstance=所用 InstanceStore 的永久性提供程序实现无效。该实现调用 BindInstance 为已绑定到某个实例的 InstanceHandle 设置实例 ID。InstanceHandle 在其整个生存期内只能绑定到一个实例。
ContextAlreadyBoundToLock=所用 InstanceStore 的永久性提供程序实现无效。该实现调用 BindAcquiredLock 为已绑定到某个锁的 InstanceHandle 设置被锁定实例版本。InstanceHandle 在其整个生存期内只能绑定到一个锁。
ContextAlreadyBoundToOwner=所用 InstanceStore 的永久性提供程序实现无效。该实现调用 BindOwner 为已绑定到某个所有者的 InstanceHandle 设置所有者。InstanceHandle 在其整个生存期内只能绑定到一个所有者。
ContextMismatchInContextAndCallBackContext=同时设置了 CorrelationCallbackContext 和 CorrelationContext，但上下文不匹配。
ContextMustBeBoundToInstance=所用 InstanceStore 的永久性提供程序实现无效。该实现调用了 BindAcquiredLock、BindReclaimedLock、BeginBindReclaimedLock 或 CreateBindReclaimedLockException 来将 InstanceHandle 绑定到实例锁版本，但 InstanceHandle 却未绑定到实例。InstanceHandle 必须先绑定到一个实例，然后才能绑定到锁。
ContextMustBeBoundToOwner=所用 InstanceStore 的永久性提供程序实现无效。该实现调用了 BindAcquiredLock、BindReclaimedLock、BeginBindReclaimedLock 或 CreateBindReclaimedLockException 来将 InstanceHandle 绑定到实例锁版本，但 InstanceHandle 却未绑定到所有者。InstanceHandle 必须先绑定到一个所有者，然后才能绑定到锁。
ContextNotFromThisStore=InstanceStore.Execute 或 InstanceStore.BeginExecute 的 handle 参数必须是通过对同一个 InstanceStore 实例调用 CreateInstanceHandle 创建的。
ContractInferenceValidationForTransactionFlowBehavior=必须将操作上的 TransactionFlow 行为设置为 Allowed。
ContractNotFoundInAddServiceEndpoint=无法添加终结点，因为找不到含有 Name='{0}' 和 Namespace='{1}' 的 ContractDescription。
ControllerInvalidBeforeInitialize=WorkflowInstance.Controller 仅在调用 Initialize 后才有效。
ConvertVariableToValueExpressionFailed=不能将“{0}”类型的变量转换为“{1}”类型的活动。
CopyToIndexOutOfRange=数组索引必须大于 0。
CopyToNotEnoughSpaceInArray=所提供的数组不足以容纳这些值。
CopyToRankMustBeOne=所提供的数组有多个维度。数组的秩必须为一，才能与 CopyTo 配合使用。
CorrelatedContextRequiredForAnonymousSend=Send 活动必须配置有终结点，或与使用 CorrelatesWith 较早建立的上下文相关。
CorrelationHandleInUse=CorrelationHandle 已经与 BookmarkScope“{0}”一起使用，因此不能与 BookmarkScope“{1}”一起使用。
CorrelationResponseContextShouldNotBeNull=CorrelationResponse 上下文不应为 null。这可能是因为未正确设置相关句柄。
CouldNotResolveNamespacePrefix=无法解析命名空间前缀“{0}”。
CreateBookmark=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”创建了 Bookmark。BookmarkName: {3}，BookmarkScope: {4}。
CreateBookmarkScope=已创建 BookmarkScope: {0}。
CreateBookmarkScopeFailed=此 BookmarkScopeHandle 已与 BookmarkScope 关联。
CreateWorkflowServiceHostStart=CreateWorkflowServiceHost 开始
CreateWorkflowServiceHostStop=CreateWorkflowServiceHost 停止
CSharpExpressionsMustBeCompiled=必须编译 CSharp 表达式。
CurrentOperationCannotCreateInstance=没有上下文附加到服务的传入消息，并且当前操作未标有“CanCreateInstance = true”。若要与此服务通信，请检查传入绑定是否支持上下文协议并已初始化了有效的上下文。
DanglingReceive=工作流缺少用来与 SendReply 配对的 Receive。请确保每个 SendReply 活动都与工作流中的一个 Receive 活动配对。
DatabaseUpgradeRequiredForCommand=SqlWorkflowInstanceStore 的数据库版本为“{0}”。InstancePersistenceCommand“{1}”无法针对此数据库版本运行。请将此数据库升级为“{2}”。
DebugInfoCannotEvaluateExpression=在当前上下文中无法计算“{0}”。
DebugInfoExceptionCaught=计算 {0} 时捕获到异常: {1}。
DebugInfoNotSkipArgumentResolution=*** 值不是 SkipArgumentResolution ***
DebugInfoTryGetValueFailed=*** TryGetValue 失败 ***
DebugInstrumentationFailed=调试程序检测失败。原因: {0}。
DebugSymbolChecksumValueInvalid=为调试符号指定的校验和在部分信任环境中无效
DefaultAbortReason=工作流已中止。
DefaultCancelationRequiresCancelHasBeenRequested=默认取消逻辑要求 HasCancelBeenRequested 为 true。只应由运行时调用 NativeActivity 的 Cancel 方法。
DefaultCreateOnlyReason=创建工作流时 WorkflowCreationContext.CreateOnly 设置为 true。
DefaultInvalidWorkflowExceptionMessage=工作流定义的结构无效。使用 ActivityValidationServices 查看所有冲突。
DefaultSuspendReason=通过控制终结点挂起了工作流。
DefaultTerminationReason=已请求工作流终止。
DefaultWorkflowApplicationExceptionMessage=无法执行操作，因为 WorkflowApplication 的当前状态不允许该操作。
DelegateArgumentAlreadyInUseOnActivity=无法对 Activity“{1}”使用 DelegateArgument“{0}”，因为 Activity“{2}”已使用了它。
DelegateArgumentChangeBlockDU=此活动是其参数已更改的 ActivityDelegate 的处理程序。
DelegateArgumentDoesNotExist=此环境中不存在 DelegateArgument“{0}”。
DelegateArgumentMustBeReferenced=在使用 DelegateArgument“{0}”之前，必须将其包括在活动的 ActivityDelegate 中。
DelegateArgumentMustBeSet=调用 CacheMetadata 之前，必须设置 DelegateArgument。
DelegateArgumentNotVisible=所引用的 DelegateArgument 对象(“{0}”)在此范围内不可见。
DelegateArgumentTypeInvalid=DelegateArgument“{0}”不能用在“{1}”类型的表达式中，因为其类型为“{2}”，与表达式类型不兼容。
DelegateHandlersCannotBeScheduledDirectly=活动“{0}”尝试直接安排 ActivityDelegate 处理程序活动“{1}”。不能直接安排 ActivityDelegate 处理程序。而是必须安排 ActivityDelegate 自身进行执行。
DelegateInArgumentTypeMismatch=为名为“{0}”的委托输入提供的参数具有无效类型。委托输入的类型为“{1}”，而参数的类型为“{2}”。参数的类型必须强制为委托输入的类型。
DelegateOutArgumentTypeMismatch=为名为“{0}”的委托输出提供的参数具有无效类型。委托输出的类型为“{1}”，而参数的类型为“{2}”。委托输出的类型必须强制为参数的类型。
DelegateParameterCannotBeModifiedAfterOpen=无法修改 ActivityDelegateParameter“{0}”。使用它的 ActivityDelegate 已锁定。对所属 WorkflowElement 调用 Invoke 时，或根据其创建 WorkflowInstance 时，将锁定 ActivityDelegate。
DelegateParameterDirectionalityMismatch=DelegateParameters 字典中的活动委托参数“{0}”的方向性为“{1}”。而方向性应为“{2}”。
DictionaryIsReadOnly=此字典是只读的，无法修改。
DifferentContractsSameConfigName=两个不同协定的 ConfigurationName 相同。
DifferentWorkflowServiceNameNotSupported=其他版本中的 WorkflowService 名称 {0} 与默认 WorkflowService 的名称 {1} 不匹配。
DirectLambdaParameterReference=无法序列化含有直接 lambda 参数引用的表达式。变量引用的格式可能有误。
DirectoryAborted=所加载实例的目录已中止。服务正在意外关闭。
DispatchOperationInInvalidState=WorkflowOperationBehavior 无法应用调度行为，因为 DispatchOperation 实例处于无效状态。
DoNotCompleteTryCommandWithPendingReclaim=所用 InstanceStore 的永久性提供程序实现无效。该实现在正尝试回收某个锁时完成了对 TryCommand 请求的处理。请使用不从 TryCommand 返回或引发的永久性提供程序，在完成从 BeginBindReclaimedLock 返回的 IAsyncResult 之前完成从 BeginTryCommand 返回的 IAsyncResult，或是在引发从 CreateBindReclaimedLockException 返回的异常之前完成。
DoNotSupportArrayIndexerOnNonArrayType=不支持类型 {0} 上的 ArrayIndexer，因为该类型不是数组类型。
DoNotSupportArrayIndexerReferenceWithDifferentArrayTypeAndResultType=不支持数组类型为 {0}，结果类型为 {1} 的左值形式的 ArrayIndexer，因为这两种类型不同。
DoNotSupportArrayIndexerValueWithIncompatibleArrayTypeAndResultType=不支持数组项类型为 {0}，结果类型为 {1} 的右值形式的 ArrayIndexer，因为 {0} 与 {1} 不兼容。
DoNotSupportArrayIndexerWithDifferentArrayTypeAndResultType=不支持数组类型为 {0} 和结果类型为 {1} 的 ArrayIndexer，因为这两种类型不同。
DoNotSupportArrayIndexerWithNonIntIndex=不支持索引类型为 {0} 的 ArrayIndexer，因为该类型不是 int。
DoWhileRequiresCondition=必须设置 Condition，然后才能使用 DoWhile 活动“{0}”。
DUActivityTypeMismatch=此活动在已更新定义中具有类型“{0}”，但类型“{1}”位于原始定义中。
DUActivityTypeMismatchRuntime=此活动的类型已作为更新的一部分发生更改。
DUDisallowIfCannotFindingMatchingCondition=如果条件转换的触发器已被移除或者更新的定义中的 Condition 活动已在另一属性中重新分配，则 StateMachine 不支持动态更新。
DuplexContractsNotSupported=工作流不支持双工协定，请从 ServiceContractAttribute 中移除 CallbackContract 属性。
DuplicateAnnotationName=无法添加名为“{0}”的批注。检查跟踪配置文件查询的批注或环境变量中是否有重名。
DuplicateCatchClause=已存在 {0} 类型的 catch 子句。对于每个唯一的 CLR 异常类型只能添加一个 catch 子句。
DuplicateCorrelationQuery=找到了含有 Where='{0}' 的重复 CorrelationQuery。计算相关性时将不使用此重复查询。
DuplicatedContract=多个实现的协定类型包含协定“{0}”和操作“{1}”。
DuplicateDefinitionIdentity=具有({0}) DefinitionIdentity 的 WorkflowService 已存在。
DuplicateEvaluationOrderValues=活动“{0}”有多个求值顺序设置为“{1}”的运行时参数。运行时参数求值顺序值必须唯一。
DuplicateImportAttribute=DynamicActivity“{1}”的属性“{0}”具有多个 ImportAttribute。每个属性只允许有一个 ImportAttribute。
DuplicateInstanceKeyExists=值“{0}”的实例键已存在。原因可能是定义的多个 MessageQuerySet 计算为同一个 CorrelationKey。
DuplicateInstrumentation={0} 检测重复。可能会在错误的位置中断。
DuplicateMethodFound=匹配不明确。“{0}”有多个名为“{2}”的公共 {1} 方法与提供给 InvokeMethod“{3}”的参数类型、泛型类型参数、泛型类型约束相匹配。
DuplicateOriginActivityActivity=活动“{1}”和活动“{2}”使用同一个原始对象“{0}”。
DuplicateOriginActivityVariable=活动“{1}”和变量“{2}”使用同一个原始对象“{0}”。
DuplicateOriginVariableVariable=变量“{1}”和变量“{2}”使用同一个原始对象“{0}”。
DurationIsNegative=Delay 活动“{0}”中 Duration 参数的值为负。
DUTriggerOrConditionChangedDuringTransitioning=如果状态正在转换并且当前转换已修改，则 StateMachine 不支持动态更新。
DynamicActivityDuplicatePropertyDetected=DynamicActivity.Properties 集合中已存在名为“{0}”的属性。
DynamicActivityMultipleExpressionLanguages=指定的活动定义包含多种语言的要求编译的表达式活动(发现的语言:“{0}”)。每个定义只允许有一种要求编译的语言。请将要求编译的所有表达式活动转换为单一语言。
EmptyCorrelationQueryResults=相关查询生成了空结果集。请确保正确配置了终结点的相关查询。
EmptyGuidOnDeserializedInstance=反序列化实例的实例 ID 为全零(Guid.Empty)。序列化实例必须具有非零的实例 ID。
EmptyIdReturnedFromHost=工作流主机类型“{0}”上的“Id”属性实现返回了全零的实例 ID。WorkflowInstance 实现必须返回除 Guid.Empty 之外的其他实例 ID。
EndpointAddressNotSetInEndpoint=未能从终结点、配置文件或回调上下文中检索到 EndpointAddress。原因可能是没有使用 OperationName='{0}' 在活动上设置终结点和终结点配置。
EndpointIncorrectlySet=在 OperationName 为“{1}”的活动“{0}”中设置了 Endpoint 和 EndpointConfigurationName 属性。但是，一次只能设置一个属性。
EndpointNotSet=OperationName 为“{1}”的活动“{0}”必须指定 Endpoint 或 EndpointConfigurationName 属性。
EndSqlCommandExecute=结束 SQL 命令执行: {0}
EnlistedTransactionPropertiesRequireIsolationBlocks=在隔离块中必须添加 enlistWorkflowState 设置为 true 的 TransactionProperty。
EnterNoPersistBlock=正在进入非持久块。
EnumeratorNotStarted=枚举尚未开始。请调用 MoveNext。
EnvironmentDisposed=LocationEnvironment 只能在其被传入的条件的范围内被访问。
ErrorExtractingValuesForLambdaRewrite=尝试从方法调用表达式“{1}”提取“{0}”类型的目标对象期间发生错误。请注意，用于确定“{0}”类型的对象的表达式不能要求运行时上下文。错误: {2}
ErrorsEncounteredWhileProcessingTree=处理工作流树时遇到以下错误:
ErrorTimeToPersistLessThanZero=TimeToPersist 值必须大于或等于 TimeSpan.Zero。若要禁用此值，请将值指定为等于 TimeSpan.MaxValue。
ErrorTimeToUnloadLessThanZero=TimeToUnload 值必须大于或等于 TimeSpan.Zero。若要禁用此值，请将值指定为等于 TimeSpan.MaxValue。
EtwAPIMaxStringCountExceeded=传递给 Etw WriteEvent 的字符串参数的数量超出了允许的最大限制 {0}。
EtwMaxNumberArgumentsExceeded=传递给 Etw WriteEvent 的参数的数量超出了允许的最大限制 {0}。
EtwRegistrationFailed=Etw 注册失败，错误代码为 {0}。
EtwUnhandledException=未经处理的异常。异常的详细信息: {0}
ExclusiveHandleRegisterBookmarkScopeFailed=仅当相应 ExclusiveHandle 的范围内当前没有书签时，才能调用 RegisterBookmarkScope。
ExclusiveHandleReinitializeFailed=仅当当前没有使用此 ExclusiveHandle 注册的书签时，才能调用 Reinitialize。
ExecuteMustBeNested=InstanceStore 的永久性提供程序实现无效。该实现试图同时执行多个嵌套命令。对于每个 InstanceStore.TryCommand (或 BeginTryCommand)调用，一次只能发出一个 InstancePersistenceContext.Execute (或 BeginExecute)调用。此错误表示永久性提供程序实现无效。
ExecuteWorkItemStart=开始执行工作项
ExecuteWorkItemStop=停止执行工作项
ExecutionPropertyAlreadyDefined=在此范围内已定义了名为“{0}”的属性。若要替换当前的属性，请先将其移除，然后添加新属性。
ExitNoPersistBlock=正在退出非持久块。
ExpressionRequiredForConversion=转换需要表达式。
ExtensionsCannotBeModified=WorkflowInstanceExtensionsManager 一旦与 WorkflowInstance 关联就不得再修改。
ExtensionsCannotBeSetByIndex=扩展集合不支持按索引设置扩展。请使用 Add 或 Remove 方法。
ExtensionTypeNotSupported=WorkflowServiceHost 不支持添加“{0}”类型的扩展。
ExternalLocationsGetOnly=尝试设置的位置来自 SymbolResolver。SymbolResolver 位置为只读。
ExtraOverloadGroupPropertiesConfigured=已配置了重载组“{0}”。同时配置重载组“{2}”中的属性“{1}”是错误的。
ExtraParameter=未在协定“{2}”的操作“{1}”中声明参数“{0}”。
ExtraReturnValue=活动包含返回消息，而协定没有包含返回值。
FailedToCreateSecurityToken=未能创建安全令牌“{0}”。
FailedToGetInstanceIdForControlOperation=未能从此管理操作的消息中获取实例 ID。这可能是由协定不匹配导致的。请确保客户端协定与服务终结点协定相匹配。
FailedToGetWorkflowIdentityForControlOperation=未能从此控制操作的消息中获得 WorkflowIdentity。这可能是由协定不匹配所导致的。请确保客户端协定与服务终结点协定匹配。
FailedToInitializeRequestReplyCorrelationHandle=配置有请求/回复操作“{0}”的 Receive 活动未能初始化 RequestReplyCorrelation 句柄。在所接收消息的 CorrelationMessageProperty 中必须存在包含 RequestReplyCorrelation 的 InstanceKey。
FailedToLoadBindingInControlEndpoint=未能为标准控制终结点“{2}”加载具有绑定配置“{1}”的绑定“{0}”。
FailFastMessage=发生了无法恢复的错误。出于诊断目的，此英语消息与下列失败关联:“{0}”。
FaultContextNotFound=Rethrow 活动“{0}”无法找到 TryCatch 活动设置的 FaultContext。若要解决此问题，请勿从执行属性集合中修改或移除 FaultContext。
FaultTypeMismatch=协定“{2}”中的操作“{1}”不存在指定的错误类型“{0}”。
FinalStateCannotHaveProperty=最终状态“{0}”不能具有 {1} 操作。
FinalStateCannotHaveTransition=最终状态“{0}”不能具有任何传出转换。
FirstParameterDoesnotMatchTheReturnValue=内容中指定的“{0}”类型的第一个参数与指定为协定“{3}”中操作“{2}”的返回值的类型“{1}”不匹配。
FlowchartContainsReferences=流程图在具有对已导入子级的引用时不支持动态更新。
FlowchartContainsUnconnectedNodes=当 ValidateUnconnectedNodes 设置为 True 时，必须连接所有节点，然后才能使用流程图“{0}”。
FlowchartEmpty=Flowchart“{0}”- 在无节点的情况下执行。
FlowchartMissingStartNode=Flowchart“{0}”没有 StartNode。
FlowchartNextNull=Flowchart“{0}”/FlowStep - 下一个节点为 null。Flowchart 执行将结束。
FlowchartStart=Flowchart“{0}”- 已安排启动。
FlowchartSwitchCase=Flowchart“{0}”/FlowSwitch - 选择了 Case“{1}”。
FlowchartSwitchCaseNotFound=Flowchart“{0}”/FlowSwitch - 找不到 Case 活动，也找不到与 Expression 结果匹配的 Default Case。Flowchart 执行将结束。
FlowchartSwitchDefault=Flowchart“{0}”/FlowSwitch - 选择了 Default Case。
FlowDecisionRequiresCondition=必须设置 Condition，然后才能使用 Flowchart“{0}”中的 FlowDecision。
FlowedTransactionDifferentFromAmbient=流入的事务与环境事务不同。
FlowNodeCannotBeShared=不能在不同的 Flowchart 之间共享 FlowNode。它已经在 Flowchart“{0}”中，因而不能用于 Flowchart“{1}”中。
FlowNodeLockedForRuntime=Flowchart“{0}”中的 FlowNode 已打开，无法修改。只能在设计时修改 FlowNode。
FlowSwitchRequiresExpression=必须设置表达式，然后才能使用 Flowchart“{0}”中的 FlowSwitch。
ForEachRequiresNonNullValues=值必须绑定到非 null 表达式，然后才能使用 ForEach 活动“{0}”。
FoundProcessingError=命令失败: {0}
GeneratedAndProvidedMapConflict=此活动提供的实现映射与当前更新之间存在冲突的更改。此活动尝试在这两个映射中保存原始值。
GeneratedAndProvidedMapConflictRuntime=此活动的实现更新与更大的工作流更新之间存在冲突的更改。此活动尝试在这两个更新中保存原始值。
GenericInstanceCommand=发生错误，名为 {0} 的 InstancePersistenceCommand 已中断执行。
GenericInstanceCommandNull=发生错误，InstancePersistenceCommand 已中断执行。
GetLocationOnPublicAccessReference=活动“{0}”无法对此公共位置引用调用 GetLocation，因为它是由 CodeActivityPublicEnvironmentAccessor.TryGetAccessToPublicLocation 创建的。若要读取或写入值，请使用 ActivityContext.GetValue 或 SetValue。若要获取对此位置的直接访问权限，请使用 CodeActivityPublicEnvironmentAccessor.TryGetReferenceToPublicLocation 声明它。
GetParameterTypeMismatch=从名为 {1} 的 InstancePersistenceAction 请求索引 {0} 处的形参时，使用的泛型类型实参有误。调用 GetParameter<T> 时，为 T 指定的类型必须与形参的记载类型匹配。
GetRunnableRequiresOwner=调用此方法前，请通过调用 WorkflowApplication.CreateDefaultInstanceOwner，为此工作流宿主指定支持的定义标识。
GuidCannotBeEmpty=该参数必须为非零 Guid。
HandledException=正在处理异常。异常的详细信息: {0}
HandledExceptionError=正在处理异常。异常的详细信息: {0}
HandledExceptionVerbose=正在处理异常。异常的详细信息: {0}
HandledExceptionWarning=正在处理异常。异常的详细信息: {0}
HandleFreed=已取消执行 InstancePersistenceCommand，因为释放了 InstanceHandle。
HandleFreedBeforeInitialized=对 InstanceHandle 执行 OnNewInstanceHandle 时不能调用该句柄上的 Free 方法。
HandleFreedInDirectory=已取消执行 InstancePersistenceCommand，因为释放了 InstanceHandle。
HandleInitializationContextDisposed=访问 HandleInitializationContext 的操作只能从其所传入的函数的作用域内进行。
HandleNotInitialized=句柄尚未初始化。句柄必须由运行时创建和初始化，并且仅在声明这些句柄的作用域内有效。
HasExecutingChildrenNoPersist=只有在没有执行子级时才能设置非永久性块。
HostIdDoesNotMatchInstance=工作流主机提供的实例 ID {0} 与序列化实例中存储的 ID {1} 不匹配。在反序列化实例时，主机必须使用在序列化实例时使用的同一 ID。
HostLockExpired=SqlWorkflowInstanceStore 锁定已过期。这可能是因为 SQL Server 繁忙，或者因为连接暂时丢失。
HostLockNotFound=SqlWorkflowInstanceStore 锁定未存在于数据库中。这可能是因为 SQL Server 繁忙，或者因为连接暂时丢失。
IdentityControlCharacter=WorkflowIdentity.Name 和 Package 不能包含控制字符(Unicode 字符类别 Cc)。
IdentityNameSemicolon=WorkflowIdentity.Name 不能包含分号“;”字符。
IdentityNotSupportedWithActivation=SqlWorkflowInstanceStore 不支持在指定 DefinitionIdentities 的 InstanceOwners 上进行激活。
IdentityWhitespace=WorkflowIdentity.Name 和 Package 不能包含前导或尾随空白(Unicode 字符类别 Zl、Zp 或 Zs)。
IdNotFoundInWorkflow=在工作流中找不到所提供的 ID“{0}”。检查工作流中是否有验证错误，如有，则生成的子树可能无法遍历。
ImplementationVersionMismatch=加载的活动实例的 ImplementationVersion (“{0}”)与提供的活动(“{2}”)的 ImplementationVersion (“{1}”)不匹配。可通过应用实现映射来更新此实例。
InArgumentBound=Activity“{1}”、DisplayName“{2}”、InstanceId“{3}”中的 In 参数“{0}”已经与值 {4} 绑定。
IncompatibleArgumentType=传递给此方法错误类型的参数。此方法需要类型为 {0} 的参数，但传递给它的是类型为 {1} 的参数。
IncompatibleTypeForMultidimensionalArrayItemReference=泛型类型“{0}”与 MultidimensionalArrayItemReference 中 Array 操作数的真正项类型“{1}”不兼容。
IncorrectIndexForArgument=返回参数的索引在“{0}”集合中有误。指定的位置为“{1}”，而位置应为“{2}”。
IncorrectValueType=从实例存储中检索到的错误类型的值。值应为 {0} 类型，但实际检索到的值为 {1} 类型。
IndexOutOfBounds=索引值 {0} 大于或等于数组的长度 {1}。
IndicesAreNeeded=必须至少为 {0} 活动“{1}”提供一个索引值。
InferredContractDescription=已从 WorkflowService 中推断出含有 Name='{0}' 和 Namespace='{1}' 的 ContractDescription。
InferredOperationDescription=已从 WorkflowService 中推断出协定“{1}”中含有 Name='{0}' 的 OperationDescription 。IsOneWay={2}。
InitializationIncomplete=活动实例的初始化未完成。当变量默认值或参数表达式错误，且异常处理程序允许继续执行时，就会发生此错误。
InitializeCorrelationRequiresWorkflowServiceHost=必须在 WorkflowServiceHost 中使用活动“{0}”。
InitialMetadataCannotBeDeleted=名称为 {0} 的永久性值是作为初始元数据值提供的，因此其 InstanceValue 不得为 InstanceValue.DeletedValue。
InitialStateCannotBeFinalState=初始状态“{0}”不能同时也是最终状态。
InitialStateNotInStatesCollection=必须向状态机的“States”集合添加初始状态“{0}”。
InlinedLocationReferenceOnlyAccessibleByOwner=活动“{0}”无法访问此公共位置引用，因为此引用仅对活动“{1}”有效。只有获取了此公共位置引用的活动才可使用此引用。
InputParametersCountMismatch=提供的输入参数个数 {0} 与预期个数 {1} 不符。
InputParametersMissing=未找到预期的名为“{0}”的输入参数。
InputParametersTypeMismatch=名为“{1}”的参数应有“{0}”类型的输入参数值。
InstanceCollisionDefault=InstancePersistenceCommand 的执行被中断，因为实例已保留到实例存储区。
InstanceCollisionSpecific=InstancePersistenceCommand 的执行被中断，因为实例“{0}”已保留到实例存储区。
InstanceCompleteDefault=InstancePersistenceCommand 的执行被中断，因为实例已完成。
InstanceCompleteSpecific=InstancePersistenceCommand 的执行被中断，因为实例“{0}”已完成。
InstanceHandleConflictDefault=InstancePersistenceCommand 的执行被中断，因为另一个有效的 InstanceHandle 在该实例上持有锁，这表示已加载该实例的未过时副本。应使用或卸载所加载的实例副本及其关联 InstanceHandle。
InstanceHandleConflictSpecific=InstancePersistenceCommand 的执行被中断，因为另一个有效的 InstanceHandle 在实例“{0}”上持有锁，这表示已加载该实例的未过时副本。应使用或卸载所加载的实例副本及其关联 InstanceHandle。
InstanceKeyMetadataChangesNotSupported=SqlWorkflowInstanceStore 不支持更改现有键的键元数据。
InstanceKeyRequiresValidGuid=不能创建全零值的 InstanceKey，如 Guid.Empty。而要使用 InstanceKey.InvalidKey 获得全零值的 InstanceKey。
InstanceLockedUnderTransaction=尝试对具有标识符“{1}”的服务实例执行管理操作“{0}”失败。有另一个活动的事务处理管理操作正在进行中。
InstanceLockLostDefault=InstancePersistenceCommand 的执行被中断，因为实例已解锁。此错误表示实例的内存中副本以及 InstanceHandle 已过时，应该弃用。
InstanceLockLostSpecific=InstancePersistenceCommand 的执行被中断，因为实例“{0}”已解锁。此错误表示该实例的内存中副本以及 InstanceHandle 已过时，应该弃用。
InstanceLocksRecoveryError=由于下列异常，导致实例锁恢复失败
InstanceMethodCallRequiresTargetObject=实例方法调用需要目标对象。
InstanceMustBePaused=必须暂停实例以执行此操作。
InstanceMustNotBePaused=不得暂停实例以执行此操作。
InstanceMustNotBeSuspended=由于实例处于挂起状态，因此操作无法执行。
InstanceNotReadyDefault=InstancePersistenceCommand 的执行被中断，因为实例尚未保留到实例存储区。
InstanceNotReadySpecific=InstancePersistenceCommand 的执行被中断，因为实例“{0}”尚未保留到实例存储区。
InstanceOperationRequiresInstance=所用 InstanceStore 的永久性提供程序实现无效。该实现报告正在执行的操作需要实例，但无实例绑定到该操作。
InstanceOperationRequiresLock=所用 InstanceStore 的永久性提供程序实现无效。该实现报告正在执行的操作要求持有某实例上的锁，但未持有该锁。
InstanceOperationRequiresNotCompleted=所用 InstanceStore 的永久性提供程序实现无效。该实现报告正在执行的操作要求实例不处于 InstanceState.Completed 状态，但实例处于该状态。
InstanceOperationRequiresNotUninitialized=所用 InstanceStore 的永久性提供程序实现无效。该实现报告正在执行的操作要求实例不处于 InstanceState.Uninitialized 状态，但实例处于该状态。
InstanceOperationRequiresOwner=所用 InstanceStore 的永久性提供程序实现无效。该实现报告正在执行的操作需要实例所有者，但无所有者绑定到该操作。
InstanceOwnerDefault=InstancePersistenceCommand 的执行被中断，因为实例所有者注册已无效。此错误表示此所有者锁定的所有实例的内存中副本以及 InstanceHandle 已过时，应该弃用。通常，处理此错误的最佳方法就是重新启动主机。
InstanceOwnerSpecific=InstancePersistenceCommand 的执行被中断，因为所有者 ID“{0}”的实例所有者注册已无效。此错误表示此所有者锁定的所有实例的内存中副本以及 InstanceHandle 已过时，应该弃用。通常，处理此错误的最佳方法就是重新启动主机。
InstanceRequired=实例永久性系统无法处理无效的 InstancePersistenceCommand。该命令需要实例，但无实例绑定到 InstanceHandle。
InstanceStoreBoundSameVersionTwice=所用 InstanceStore 的永久性提供程序实现无效。该实现报告对同一实例上某个锁的同一版本进行了两次获取和提交。每次在实例上获取某个锁时，锁版本必须递增；否则应始终报告零作为锁版本。当某个提供程序检测到实例所有者试图锁定自己已锁定的实例时，该提供程序应调用 BindReclaimedLock、BeginBindReclaimedLock 或 CreateBeginBindReclaimedLockException 而不是 BindAcquiredLock。
InstanceStoreDoesntMatchWorkflowApplication=用不同于此 WorkflowApplication 的 InstanceStore 配置该实例。
InstanceStoreFailed=InstanceStore 的实现引发了 InstancePersistenceException。InstancePersistenceException 是内部异常。
InstanceStoreHasDefaultOwner=此 InstanceStore 已经有一个 DefaultInstanceOwner。
InstanceStoreReadOnly=SqlWorkflowInstanceStore 是只读的，不能进行进一步配置。SqlWorkflowInstanceStore 的所有配置必须在创建第一个 InstanceHandle 之前完成。
InstanceStoreRequiredToPersist=只有配置有 InstanceStore 的 WorkflowApplications 才能够实现持久化或被卸载。
InstanceSuspended=具有标识符“{1}”的服务实例当前处于“Suspended”状态。尝试执行管理操作“{0}”失败。
InsufficientArraySize=数组大小为 {0}，不足以容纳操作的结果。
InternalCacheMetadataStart=已在活动“{0}”上启动 InternalCacheMetadata。
InternalCacheMetadataStop=已在活动“{0}”上停止 InternalCacheMetadata。
InternalConstraintException=针对名为“{2}”的 {1} 类型活动运行名为“{0}”的约束时，出现内部约束异常。异常为: {3}
InternalServerError=由于内部错误，服务器无法处理请求。有关该错误的详细信息，请在服务器上打开 IncludeExceptionDetailInFaults (从 ServiceBehaviorAttribute 或从 <serviceDebug> 配置行为)，从而将异常信息发回客户端，或按 Microsoft .NET Framework 4.0 SDK 文档打开跟踪，并检查服务器跟踪日志。
InvalidActivityIdFormat=提供的活动 ID 格式无效。它必须是整数值的点分列表，如“1.12.3”，且不含前导或尾随的点。
InvalidActivityToBlockUpdate=DynamicUpdateMapBuilder.DisallowUpdateInside 中的活动“{0}”不是 DynamicUpdateMapBuilder.UpdatedWorkflowDefinition 的公共成员。请确保此活动是已更新工作流定义的一部分。如果已作为更新的一部分移除此活动，则您不需要显式阻止更新；如果已移除活动正在运行，则会自动阻止更新。
InvalidActivityToBlockUpdateServices=活动“{0}”不是 updatedWorkflowDefinition 的公共成员。请确保此活动是已更新工作流定义的一部分。如果已作为更新的一部分移除此活动，则您不需要显式阻止更新；如果已移除活动正在运行，则会自动阻止更新。
InvalidArgumentExpression=类型为“{1}”的第 {0} 个参数表达式无效。
InvalidAsyncBeginMethodSignature=异步 Begin 方法签名对于类型 {1} 中的方法 {0} 无效。Begin 方法必须采用 AsyncCallback 和对象作为最后两个参数，并返回 IAsyncResult。
InvalidAsyncCancelMethodSignature=异步 Cancel 方法签名对于类型 {1} 中的方法 {0} 无效。Cancel 方法不得采用参数，并且必须返回 void。
InvalidAsyncEndMethodSignature=异步 End 方法签名对于类型 {1} 中的方法 {0} 无效。End 方法必须采用 IAsyncResult 作为最后一个参数。
InvalidAsyncResult=向“End”方法提供的 IAsyncResult 不正确。传递给“End”的 IAsyncResult 对象必须是与之配对的“Begin”返回的对象，或是传递给为“Begin”提供的回调的对象。
InvalidAsyncResultImplementation=IAsyncResult 接口的实现有误，该实现可能会从 CompletedSynchronously 属性返回错误的值，或多次调用 AsyncCallback。类型 {0} 可能是错误的实现。
InvalidAsyncResultImplementationGeneric=IAsyncResult 接口的实现有误，该实现可能会从 CompletedSynchronously 属性返回错误的值，或多次调用 AsyncCallback。
InvalidCallbackState=必须为回调状态的对象传递有效的 {0} 数据。
InvalidCompensateActivityUsage=只能在补偿/确认/取消处理程序的上下文内使用未设置“Target”InArgument 的 Compensate 活动“{0}”。
InvalidCompensationToken=绑定到“Target”InArgument 的 Variable 的值为 null。应使用从 CompensableActivity 获得的有效 CompensationToken 设置“Target”InArgument。否则，如果需要默认的补偿/确认用法，则不要在补偿/确认/取消处理程序的上下文内设置“Target”InArgument 和使用“{0}”活动。
InvalidConfirmActivityUsage=只能在补偿/确认/取消处理程序的上下文内使用未设置“Target”InArgument 的 Confirm 活动“{0}”。
InvalidDataFromReceiveBookmarkState=在已恢复用于接收操作“{0}”的书签的情况下，无法获取有效的 MessageContext。
InvalidDataFromSendBookmarkState=在已恢复用于发送操作“{0}”的书签的情况下，无法获取有效的 CorrelationMessageProperty 或 Fault。
InvalidDirectionForArgument=“{0}”集合中“{1}”位置的参数的参数方向有误。指定的方向为“{2}”，而方向应为“{3}”。
InvalidDynamicActivityProperty=此属性描述符无效。提供的组件中不含与此描述符({0})对应的属性。
InvalidEvaluationOrderValue=EvaluationOrder 值无效。求值顺序值必须从零开始，依次递增，且必须唯一。使用 -1 指示不设置求值顺序。
InvalidExecutionCallback=“{0}”不是有效的活动执行回调。“{1}”使用的执行回调必须是“{1}”上的实例方法。
InvalidExpressionForLocation=不能从“{0}”类型的 Expression 生成 Location。
InvalidExpressionProperty=类型“{0}”的“Expression”属性无效。
InvalidFileName=为活动 {0} 指定的 fileName 无效
InvalidGenericTypeInfo=类型“{0}”中包含的某些泛型类型信息无效。
InvalidIdleAction=返回的 PersistableIdleAction 超出了范围。它必须为 None、Unload 或 Persist。
InvalidImplementationAsWorkflowRoot=若要使实现映射直接应用于工作流实例，定义的根目录不得具有任何公共/导入的子级或公共/导入的委托。
InvalidImplementationAsWorkflowRootForRuntimeState=若要使实现映射直接应用于工作流实例，定义的根目录不得具有任何公共子级。此实例当前有一个或多个公共子级正在运行。
InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged=若要使实现映射直接应用于工作流实例，实现映射必须指示参数没有更改。实现映射指示活动定义的参数已更改。
InvalidImplementationMap=提供的实现映射与活动的定义不匹配。请确保已更新工作流引用的活动版本与所提供映射的目标版本相同。]D;]A;    ]D;]A;疑难解答详细信息: 映射中的成员计数:“{0}”；定义中的成员计数:“{1}”。
InvalidImplementationMapAssociation=无法使用通过 DynamicUpdateMapBuilder.LookupImplementationMap 为活动“{0}”提供的实现映射，因为此活动没有任何实现子级。请验证是否已对适当的活动调用 SetImplementationMap。
InvalidImplementationMapAssociationServices=无法使用通过 DynamicUpdateServices.SetImplementationMap 为活动“{0}”提供的实现映射，因为此活动没有任何实现子级。请验证是否已对适当的活动调用 SetImplementationMap。
InvalidImplementationMapRuntime=生成更新映射时，为此活动提供了错误的实现映射。
InvalidInstanceId=加载实例时使用了全零的无效实例 ID (Guid.Empty)。
InvalidInstanceState=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要加载的实例的 InstanceState 值无效。
InvalidKey=加载或创建实例时使用了无效的键。
InvalidKeyArgument=作为参数传递的全零键(如 Guid.Empty)无效。
InvalidLocationExpression=位置表达式无效: 应为“[...]5D;”。
InvalidLockRenewalPeriod=所提供的锁定续订期 {0} 短于最短锁定续订期 {1}。
InvalidLockToken=如果永久性提供程序没有实现锁的版本控制，则传递给 InstancePersistenceContext.BindAcquiredLock 的 instanceVersion 必须为零；否则必须大于零。
InvalidLValueExpression=左值表达式无效。
InvalidMergeMap=活动 ID 为“{1}”的“{0}”位置(从零开始)的映射与它前面的映射不匹配。请确保所有映射均表示相同工作流定义的连续更新。]D;]A;    ]D;]A;疑难解答详细信息: {2}
InvalidMergeMapArgumentCount=原始参数计数应为“{0}”，实际为“{1}”。
InvalidMergeMapArgumentsChanged=参数(name、direction、type 或 order)中出现意外更改。
InvalidMergeMapEnvironmentCount=预期原始参数计数为“{0}”，公共变量计数为“{1}”，私有变量计数为“{2}”。实际原始参数计数为“{3}”，公共变量计数为“{4}”，私有变量计数为“{5}”。
InvalidMergeMapForImplementation=ForImplementation 应为“{0}”，实际为“{1}”。
InvalidMergeMapMemberCount=原始成员计数应为“{0}”，实际为“{1}”。
InvalidMetadataValue=元数据属性“{0}”的指定值必须为 {1} 类型。
InvalidNullAsyncResult=从异步“Begin”方法返回的值或传递给 AsyncCallback 的值为 null。异步“Begin”实现必须返回非 null 的 IAsyncResult，并将同一 IAsyncResult 对象作为参数传递给 AsyncCallback。
InvalidOriginalWorkflowDefinitionForImplementationMapCreation=提供给映射生成器的 OriginalWorkflowDefinition 对于实现映射创建无效，因为它没有任何实现子级。
InvalidParameterInfo=第 {0} 个参数信息在“{1}”类型中无效。
InvalidPrepareForRuntimeValidationSettings=如果为 ValidationSettings 设置了 SingleLevel、SkipValidatingRootConfiguration 或 OnlyUseAdditionalConstraints 中的任何一个，则无法为运行时准备工作流。
InvalidProperty=属性({0})或者无效，或者未定义。
InvalidPropertyType=无法解析属性“{1}”的类型“{0}”。
InvalidReceiveStateForDU=Receive 处于不支持实例更新的状态。仅当 Receive 等待服务器端的请求消息时才能进行更新。
InvalidRootMergeMap=“{0}”位置(从零开始)的根映射与它前面的映射不匹配。请确保所有映射均表示相同工作流定义的连续更新。]D;]A;    ]D;]A;疑难解答详细信息: {1}
InvalidRunnableInstancesDetectionPeriod=提供的可运行实例检测期限 {0} 比允许的最低期限 {1} 短。
InvalidRuntimeState=提供的值不是有效的运行时状态。
InvalidSemaphoreExit=从不同步的代码块中调用了对象同步方法。
InvalidServiceImplementation=WorkflowServiceHost 要求提供的 serviceImplementation 为 Activity 或 WorkflowService。
InvalidSourceLocationColumn=列号应该大于 0 (从 1 开始)。{0} = {1} 无效。
InvalidSourceLocationLineNumber=行号应该大于 0 (从 1 开始)。{0} = {1} 无效。
InvalidStateForAsyncCallback=传入异步回调的 IAsyncResult 没有有效的 AsyncState。
InvalidStateInAsyncResult=所提供的异步结果状态环境无效。
InvalidTypeConverterUsage=TypeConverter 用法无效。
InvalidTypeForArgument=为“{0}”集合中“{1}”位置的参数指定的类型与预期类型不匹配。指定的类型为“{2}”，而类型应为“{3}”。
InvalidUnhandledExceptionAction=返回的 UnhandledExceptionAction 超出范围。它必须为 Abort、Cancel 或 Terminate。
InvalidUpdatedWorkflowDefinitionForImplementationMapCreation=提供给映射生成器的 UpdatedWorkflowDefinition 对于实现映射创建无效，因为它没有任何实现子级。
InvalidUpdateMap=更新映射与工作流定义不匹配。请确保这是此定义的正确映射并且序列化的映射尚未经手动修改。]D;]A;    ]D;]A;疑难解答详细信息: {0}
InvalidVisualBasicSettingsValue=Settings 属性的值无效。请将 Settings 属性设置为空字符串或“Assembly references and imported namespaces serialized as XML namespaces”字符串。
InvalidXamlMember=“{0}”不是 XAML 中的有效标识符。
InvokedMethodThrewException=在活动“{0}”调用的方法中，引发了异常。{1}
InvokeMethodDoesNotUseAsyncPattern=InvokeMethod“{0}”- 方法不使用异步模式。
InvokeMethodIsNotStatic=InvokeMethod“{0}”- 方法非静态。
InvokeMethodIsStatic=InvokeMethod“{0}”- 方法为静态。
InvokeMethodUseAsyncPattern=InvokeMethod“{0}”- 方法使用“{1}”和“{2}”的异步模式。
IsolationLevelValidation=嵌套 TransactionScope 活动的 IsolationLevel 必须与其父级的该值相等。
ITextExpressionParameterMustBeActivity=“expression”参数的类型必须为活动。
KeyAlreadyAssociated=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要与某实例关联的键已经与该实例关联。
KeyAlreadyCompleted=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要完成的键已经完成。
KeyAlreadyUnassociated=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要断开关联的键所关联的现有实例没有完成。
KeyCollectionUpdatesNotAllowed=不允许对从字典派生的键集合进行转变。
KeyCollisionDefault=键冲突中断了 InstancePersistenceCommand 的执行。
KeyCollisionSpecific=键冲突中断了 InstancePersistenceCommand 的执行。值为“{1}”的实例键无法与实例“{0}”关联，因为它已与不同的实例“{2}”关联。
KeyCollisionSpecificKeyOnly=键冲突中断了 InstancePersistenceCommand 的执行。值为“{0}”的实例键无法与实例关联，因为它已与不同的实例关联。
KeyCompleteDefault=InstancePersistenceCommand 的执行被中断，因为实例键已完成。
KeyCompleteSpecific=InstancePersistenceCommand 的执行被中断，因为实例键“{0}”已完成。
KeyNotAssociated=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要完成或修改的键与现有实例没有关联。
KeyNotCompleted=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要断开关联的键尚未完成。
KeyNotFoundInDictionary=字典中不存在给定的键。
KeyNotReadyDefault=InstancePersistenceCommand 的执行被中断，因为实例键未与实例关联。发生这种情况可能是因为实例或键已清除，或是因为键无效。如果生成键的消息在错误的时间发送或包含错误的相关数据，则键可能无效。
KeyNotReadySpecific=InstancePersistenceCommand 的执行被中断，因为实例键“{0}”未与实例关联。发生这种情况可能是因为实例或键已清除，或是因为键无效。如果生成键的消息在错误的时间发送或包含错误的相关数据，则键可能无效。
LambdaExpressionReturnTypeInvalid=提供的 Lambda 表达式的返回类型不应该为 null 或 void。
LambdaExpressionTypeRequired=提供的表达式必须为 LambdaExpression。
LambdaNotXamlSerializable=此工作流包含以代码形式指定的 lambda 表达式。这些表达式不可序列化为 XAML。若要使工作流可序列化为 XAML，请使用 VisualBasicValue/VisualBasicReference 或 ExpressionServices.Convert(lambda)。这会将 lambda 表达式转换为表达式活动。
LegalCopyright=© Microsoft Corporation。保留所有权利。
LineNumberTooLarge=为活动 {0} 指定的行数过大，在部分信任环境中不受支持
LiteralsMustBeValueTypesOrImmutableTypes=文本仅支持值类型和不可变类型 {0}。类型 {1} 不能用作文本。
LoadedWriteOnlyValue=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要加载的 InstanceValue 带有 InstanceValueOptions.WriteOnly 设置。不应加载 Write-only 值。
LoadingAborted=加载实例的尝试被中止。
LoadingWorkflowApplicationRequiresInstanceStore=WorkflowApplication 需要先设置有效的 InstanceStore 才能调用 Load 或 LoadRunnableInstance。
LoadOpAssociateKeysCannotContainLookupKey=如果未指定 LoadWorkflowByInstanceKeyCommand.AssociateLookupKeyToInstanceId，则 LookupInstanceKey 必须已经与某个实例相关联，否则 LoadWorkflowByInstanceKeyCommand 将失败。因此，如果未设置 AssociateLookupKeyToInstanceId，则在 InstanceKeysToAssociate 集合中同时指定 LookupInstanceKey 是无效行为。
LoadOpFreeKeyRequiresAcceptUninitialized=如果指定了 LoadByKeyOperation.InstanceIdForFreeKey，则必须将 AcceptUninitializedInstance 设置为 true。如果键是自由的，则它将通过所提供的实例 ID 与某个未初始化的实例相关联。
LoadOpKeyMustBeValid=用于查找实例的键 LoadByKeyOperation.LookupKey 不得为全零，如 Guid.Empty。
LocationExpressionCouldNotBeResolved=位置表达式“{0}”无法解析为变量或属性。确保位置表达式解析为在作用域层次结构中定义的变量或属性。
LocationTypeMismatch=名称为“{0}”的位置不能作为“{1}”类型的位置进行检索，因为它是“{2}”类型的位置。类型必须完全匹配，因为位置同时提供读写访问。
LockRetryTimeout=尝试获取实例锁时超时。此操作没有在分配的超时限制 {0} 内完成。分配给此操作的时间可能是更长超时限制的一部分。
LockTimeoutExceptionMessage=无法在分配的超时 {0} 内获得锁定。分配给该操作的时间可能已经是更长超时的一部分。
MapEntryNotFound=未找到活动“{0}”的更新映射项。
MarkCanceledOnlyCallableIfCancelRequested=只有已请求取消的活动才能调用 MarkCanceled。调用此方法之前请检查 ActivityInstance.HasCancelBeenRequested。
MaximumRetriesExceededForSqlCommand=正在放弃重试 SQL 命令，因为执行次数已达到了允许的最多重试次数。
MaxInstancesExceeded=系统达到为限制“MaxConcurrentInstances”设置的限制值。此限制的限制值设置为 {0}。可通过修改 serviceThrottle 元素中的特性“maxConcurrentInstances”或修改行为 ServiceThrottlingBehavior 的“MaxConcurrentInstances”属性来更改限制值。
MaxPendingMessagesPerChannelExceeded=达到了“{0}”的中止值“MaxPendingMessagesPerChannel”。若要增加此限制，请调整 BufferedReceiveServiceBehavior 中的 MaxPendingMessagesPerChannel 属性。
MaxPendingMessagesPerChannelMustBeGreaterThanZero=中止值必须大于零。若要禁用，请设置为 Int32.MaxValue。
MayBindLockCommandShouldValidateOwner=从 AutomaticallyAcquiringLock 返回 true 的 InstancePersistenceCommand 还必须重写 Validate，以便在使用未绑定到 InstanceOwner 的 InstanceHandle 执行命令时引发 InvalidOperationException。
MemberCannotBeNull={1} 活动“{2}”中的“{0}”不可以为 null。
MemberIsReadOnly=“{1}”类型的成员“{0}”为只读。它不能是 LValue。
MemberNotFound=在类型“{1}”上未找到名为“{0}”的成员。
MemberNotSupportedByActivityXamlServices=ActivityXamlServices 遇到 DynamicActivity 不支持的成员({0})。
MessageCannotBeEmpty=消息内容为 null，这与协定“{1}”中的操作“{0}”不匹配
MessageContentCannotHaveMoreThanOneParameter=已实现协定“{1}”上的操作“{0}”对于消息协定不能包含多个参数。
MessageHeaderNotSupported=不支持 MessageDescription 中的自定义消息标头。请在协定“{1}”的操作“{0}”中使用 MessageContract 修饰的类型。
MessagePropertyIsNotSupported=不支持 MessageDescription 中的自定义消息属性。请在协定“{1}”的操作“{0}”中使用 MessageContract 修饰的类型。
MessageTypeMismatch=Receive 在 ReceiveMessageContent 中指定了一个 System.ServiceModel.Channels.Message 类型，该类型不同于已实现协定“{2}”的操作“{1}”中指定的消息类型“{0}”。
MessageVersionInformationNotFound=找不到响应消息版本信息。
MetadataCannotContainNullKey=InstanceValue 的命名集合(字典)中提供了一个 null 名称。对于 InstanceValue 来说，null 不是有效的名称。
MetadataCannotContainNullValue=InstanceValue 的命名集合(字典)中提供了一个 null 值。为 null 值提供的名称为 {0}。null 不是有效的 InstanceValue。若要指定 null 值，请将 null 传递给 InstanceValue 构造函数，从而使用具有 null 数据的 InstanceValue 实例。若要指示应该删除命名值，请使用 InstanceValue.DeletedValue。
MethodInfoRequired=需要“{0}”类型的 Method 属性。
MethodNameRequired=需要“{0}”类型的 Name 属性。
MissingArgument=与名称“{0}”关联的 Argument 在“{1}”集合中为 null。
MissingBindingInEndpoint=Name 为“{0}”且含有 ServiceContract“{1}”的终结点没有绑定。请向此终结点提供绑定。
MissingBodyInWorkflowService=当前 WorkflowService 的 Body 属性为 null。请为此 WorkflowService 提供 Body 属性。
MissingDisplayNameInRootActivity=根活动的 DisplayName 为空。请不要将根活动的 DisplayName 设置为 null 或空字符串，也不要为 WorkflowService 提供 Name 属性。
MissingKnownTypes=协定“{2}”中的操作“{1}”缺少已知类型“{0}”。
MissingNameProperty=“{0}”类型的参数没有名称。应为此集合中的项指定 Name 属性。
MissingOperationName=必须在活动“{0}”中设置 OperationName 属性。
MissingParameter=参数集合不包含在协定“{2}”中的操作“{1}”上指定的参数“{0}”。
MissingServiceContractName=必须在 OperationName 为“{1}”的活动“{0}”中设置 ServiceContractName 属性。
MissingSetAccessorForIndexer=类型 {1} 的 Indexer 属性 {0} 未公开 setter 访问器。
MissingUriInEndpoint=Name 为“{0}”并具有 ServiceContract“{1}”的终结点的 URI 属性为 null 或空。必须提供此终结点的 URI。
MisuseOfMessageContent=为协定“{1}”中的操作“{0}”指定了数据协定，请将 ReceiveParameterContent 用于 Receive 活动并将 SendParameterContent 用于 SendReply 活动以匹配协定定义。
MisuseOfParameterContent=为协定“{1}”中的操作“{0}”指定了消息协定类型，请将 ReceiveMessageContent 用于 Receive 活动并将 SendMessageContent 用于 SendReply 活动以匹配协定定义。
MovingActivitiesInStateBlockDU=如果原始定义中的活动属性已重新分配给 State 或其 Transition 中的另一个属性，则 StateMachine 不支持动态更新。
MultiDimensionalArraysNotSupported=不支持多维数组。
MultipleFlowNodesSharingSameChildBlockDU=当多个 FlowNode 共享同一个子活动时，流程图不支持动态更新。
MultipleLockOwnersNotSupported=SqlWorkflowInstanceStore 不支持同时创建多个锁定所有者。请考虑将 InstanceStore.DefaultInstanceOwner 设置为在多个应用程序间共享该存储区。
MultipleOverloadGroupsConfigured=配置了以下重载组: {0}。只有一个重载组应配置其参数。
MustCallPrepareBeforeFinalize=工作流定义没有其原始定义的附加副本。对工作流进行更新之前，请调用 DynamicUpdateServices.PrepareForUpdate 以保存原始定义的副本。
MustCancelOldTimer=在设置新的计时器之前，必须取消以前的计时器。
MustMatchReferenceExpressionReturnType=引用表达式不能以 Conversion 结尾。所提供的表达式类型必须与 VisualBasicReference<T> 或 LambdaReference<T> 的类型 T 完全匹配。
MustSetTransactionOnFirstCall=所用 InstanceStore 的永久性提供程序实现无效。对调用 InstancePersistenceContext.Execute 或 InstancePersistenceContext.BeginExecute 的线程设置了环境事务(System.Transactions.Transaction.Current)，但在此执行阶段中未设置事务就已执行了命令。只能对第一次 Execute 或 BeginExecute 调用(且只有尚未给该阶段设置其他事务时)设置环境事务。
MustSpecifyConnectionStringOrName=需要指定 connectionString 或 connectionStringName 属性。
NameCollisionOnCollect=检测到类型“{1}”的持久性参与者提供的名称“{0}”有名称冲突。参与者的 CollectValues 实现所提供的值使用的名称与此参与者或其他持久性参与者所提供的另一个值相同。请将此参与者改为使用其他名称，以避免冲突，或从工作流的扩展集合中移除该参与者。
NameCollisionOnMap=检测到类型“{1}”的持久性参与者提供的名称“{0}”有名称冲突。参与者的 MapValues 实现所提供的值使用的名称与此参与者或其他持久性参与者所提供的另一个值相同。请将此参与者改为使用其他名称，以避免冲突，或从工作流的扩展集合中移除该参与者。
NativeActivityUpdateInstanceThrewException=该活动从其 UpdateInstance 方法引发了异常: {0}
NAUCDisposed=只能在 NativeActivityUpdateContext 传入到的函数范围内访问它。
NewArrayBoundsRequiresIntegralArguments=“NewArrayBounds”需要整型参数。
NewArrayRequiresArrayTypeAsResultType=“NewArray”活动的结果类型必须为具体数组类型。
NoAdditionalKeysOnInstanceIdLoad=如果使用 InstanceStore 作为永久性提供程序，则按某实例的 ID 加载该实例时不能指定其他键。
NoCAInSecondaryRoot=CompensableActivity 不能嵌套在父 CompensableActivity 的补偿、确认或取消处理程序内。
NoChangesMapQueryNotSupported=不支持 NoChanges 映射上的查询。
NoDynamicArgumentsInActivityDefinitionChange=此活动提供的实现映射与当前更新之间存在冲突的更改。此活动的参数在这两个更新中已更改。
NoDynamicArgumentsInActivityDefinitionChangeRuntime=此活动的实现更新与更大的工作流更新之间存在冲突的更改。此活动的参数在这两个更新中已更改。
NoNamespace=无法解析命名空间“{0}:”。
NonWASActivationNotSupported=SqlWorkflowInstanceStore 仅支持 WAS 激活。
NoOutputLocationWasFound=参数 {0} 无法与有效的输出位置匹配。
NoOverloadGroupsAreConfigured=没有一个重载组配置了其所需/可选的所有活动参数。
NoPersistScopeCannotContainPersist=NoPersistScope 活动“{0}”不能包含 Persist 活动“{1}”。
NoPromotionsDefined=命名提升 {0} 未定义任何提升。
NoRunnableInstances=在要加载的 InstanceStore 中找不到可运行的工作流实例。
NoRuntimeTransactionExists=在运行时没有活动事务时调用 CompleteTransaction 是无效的。
NotSpecified=<未指定>
NotSupportMoreThanOneParametersInMessageContract=将 MessageContracts 用于协定“{1}”中的操作“{0}”时，操作不能包含多个参数。请提供有效的协定定义。
NullAssignedToValueType=从实例存储中检索到的错误类型的值。值应为 {0} 类型，但实际检索到的值为 null 值。
NullCorrelationHandleInInitializeCorrelation=“{0}”中的 CorrelationHandle 不能为 null。
NullCorrelationHandleInMultipleQueryCorrelation=至少有一个 QueryCorrelationInitializer 未设置相关句柄。当 CorrelationInitializers 集合中存在多个 QueryCorrelationInitializer 时，需要指定 CorrelationHandle。
NullKeyAlreadyPresent=已添加了具有 null 键的项。
NullReferencedMemberAccess=无法按成员 {1} 取消 {0} 类型的 null 对象的引用。
NullReplyMessageContractMismatch=从服务器收到了 null 答复消息。这可能是因为客户端和服务器端之间的协定不匹配。请确认针对双向操作配置了服务器端工作流。
OnCancelRequestedThrew=所用 InstanceStore 的永久性提供程序实现无效。该实现的取消处理程序引发了异常。该处理程序是通过 InstancePersistenceContext.SetCancellationHandler 方法指定的。
OneOfTwoPropertiesMustBeSet=活动“{3}”中的“{2}”要求有“{0}”属性或“{1}”属性。
OnewayContractIsImplementedAsTwoWay=协定“{1}”中的单向操作“{0}”不应具有 SendReply 活动。
OnFreeInstanceHandleThrew=所用 InstanceStore 的永久性提供程序实现无效。其 OnFreeInstanceHandle 实现引发了异常。
OnlyBookmarkOwnerCanRemove=书签只能由创建了这些书签的活动实例移除。
OnlyOneOperationPerActivity=在给定时间，对活动只能有一个操作处于活动状态。已有另一个操作正在进行中。
OnlyOneRequireTransactionContextAllowed=运行时已在尝试向 RequireTransactionContext 的调用提供服务。
OnlySingleCastDelegatesAllowed=WorkflowApplication 事件只允许使用非多播委托。所提供的委托具有长度大于一的调用列表。
OperationAlreadyCompleted=操作已完成。
OperationDoesNotExistInContract=名称为“{1}”且命名空间为“{2}”的协定中不存在操作“{0}”。
OperationFormatterAndFaultFormatterIncorrectlySet=不能同时设置 OperationFormatter 和 FaultFormatter。
OperationFormatterAndFaultFormatterNotSet=OperationFormatter 和 FaultFormatter 不能同时为 null。
OperationHasSerializerBehavior=协定“{1}”中的操作“{0}”已有“{2}”行为，因此不能添加新行为。这通常表示已为此操作调用了 IOperationSerializer.ApplyToOperation 方法。
OperationIsNotImplemented=工作流中未实现协定“{1}”中的操作“{0}”。
OperationNotAvailable=此时不能执行具有标识符“{1}”的服务实例上的操作“{0}”。请确保按正确顺序执行操作，并且正在使用的绑定能够保证有序传递。
OperationNotFound=在默认 WorkflowService 中找不到协定为 {0}、操作为 {1} 的 Receive。请确保先在默认 WorkflowService 中添加其他 WorkflowService 版本中的所有操作。
OptionalExtensionTypeMatchedMultiple=已找到类型“{0}”的多个扩展。运行此工作流时，最多允许此类型的一个扩展。
OriginalActivityReusedInModifiedDefinition=原始定义中的活动“{0}”无法在已更新的定义中重用。
OriginalVariableReusedInModifiedDefinition=原始定义中的变量“{0}”无法在已更新的定义中重用。
OriginCannotBeRuntimeIntrinsic=对象“{0}”不能用作原始对象，因为它已经是工作流定义元素(Activity、ActivityDelegate、Argument 或 LocationReference)。
OutArgumentCannotHaveInputValue=不能用输入值配置 OutArgument“{0}”。应该从输入字典中移除键“{0}”。
OutOfIdSpaceIds=此 ID 空间中活动的数量已超过 Int32.MaxValue。将工作流的某些部分重构为新的 Activity 子类。
OutOfInstanceIds=工作流中只能执行 long.MaxValue 个 Activity 实例。
OutOfInternalBookmarks=只能为工作流生成 long.MaxValue 个内部书签。
OutOfRangeSourceLocationEndColumn=对于单行 SourceLocation，endColumn 应该 >= startColumn (= {0})。
OutOfRangeSourceLocationEndLine=SourceLocation 的 endLine 应该 >= startLine (= {0})。
OutsideInstanceExecutionScope=所用 InstanceStore 的永久性提供程序实现无效。只能在处理命令的过程中调用 {0} 方法。请勿尝试保留 InstancePersistenceContext 的实例供以后使用。只能在处理 TryCommand 和 BeginTryCommand 命令的过程中使用提供给这些命令的 InstancePersistenceContext。
OutsideTransactionalCommand=所用 InstanceStore 的永久性提供程序实现无效。在执行不应要求事务一致性的命令期间，该实现对 InstancePersistenceContext 调用了方法 {0}，该方法要求事务一致性。此操作可能导致数据损坏。此错误表示永久性提供程序实现无效。
OverloadGroupHasSubsets=以下重载组是组“{0}”的子集: {1}。使一个重载组作为另一个重载组的子集是错误的。
OverloadGroupsAreEquivalent=以下重载组互相等效: {0}。此处只定义一个重载组就足够了。
OverloadingMethodMustBeStatic=重载运算符的方法必须是静态的。
OverloadOnlyCallableFromWorkflowThread=此方法重载只能从工作流线程中调用。
OwnerBelongsToWrongStore=提供的 InstanceOwner 不正确。向 InstanceStore 方法提供的 InstanceOwner 必须属于 InstanceStore。只能将 InstanceOwner 对象与创建它的 InstanceStore 一起使用。
OwnerRequired=实例永久性系统无法处理无效的 InstancePersistenceCommand。该命令需要实例所有者，但无所有者绑定到 InstanceHandle。
ParallelForEachRequiresNonNullValues=值必须绑定到非 null 表达式，然后才能使用 ParallelForEach 活动“{0}”。
ParameterNumberMismatch=协定“{2}”中的操作“{1}”上不存在参数“{0}”。
ParameterPositionMismatch=协定“{2}”中的操作“{1}”的参数“{0}”顺序不正确。请将该参数移到参数集合中的位置“{3}”。
ParameterTypeMismatch=参数“{0}”的类型与已实现协定“{3}”的操作“{2}”中指定的类型“{1}”不匹配。
PartialTrustPerformanceCounterNotEnabled=拒绝访问性能计数器。应用程序可能在部分受信任的情况下运行。请禁用性能计数器，或将该应用程序配置为在完全受信任的情况下运行。
PauseWhenPersistableInvalidIfPersistable=仅当 IsPersistable 为 false 时，才能调用 PauseWhenPersistable。
PendingMessagesPerChannelRatio=每个通道的挂起消息比率: {0}/{1}
PermissionArgumentWrongType=参数的类型错误。应为“{0}”。
PersistenceInitializerThrew=IPersistenceContextInitializer 实现引发了异常。无法加载或创建持久性服务实例，如 WorkflowServiceInstance。InnerException 属性包含原始异常。
PersistencePipelineAbortThrew=类型为“{0}”的持久性参与者的 Abort 实现引发了异常。异常不应从 Abort 实现引发。
PersistenceProviderRequiredToPersist=只有已用 PersistenceProvider 扩展配置的工作流实例可以持久化或卸载。
PersistenceTooLateToEnlist=在事务中登记已太晚。事务已经开始提交或中止。
PersistenceViolationNoCreate=所用 InstanceStore 的永久性提供程序实现无效。创建新实例时应该已经引发 InstanceNotReadyException。
PickBranchRequiresTrigger=必须设置触发器，然后才能使用 PickBranch“{0}”。
PickBranchTriggerActionSwapped=交换 PickBranch 的 Trigger 和 Action 时，Pick 不支持动态更新。
PrepareForSerializationRequiresPersistability=仅当 IsPersistable 为 true 时，才能调用 PrepareForSerialization。
PrivateMembersHaveChanged=此活动的私有实现已更改(添加、移除或重新排列实现子级、委托、变量或参数)。动态更新只支持实现映射中指定的实现更改，与此活动的公共配置无关。
PromotionAlreadyDefined=已定义提升集 {0}。
PromotionTooManyDefined=提升集 {0} 定义了 {1} 个 {2} 提升，超出允许的最大提升数 {3}。
PropertyCannotBeModified=SqlTrackingParticipant 开始处理记录之后，就不能修改 {0} 属性。
PropertyMemberNotSupportedByActivityXamlServices=ActivityXamlServices 遇到 DynamicActivityProperty 不支持的 x:Property 成员({0})。
PropertyMismatch=“{0}”与协定“{4}”的操作“{3}”上提供的“{1}”值“{2}”不匹配。
PropertyReadOnlyInWorkflowDataContext=属性“{0}”在 WorkflowDataContext 中为只读。
PropertyReferenceNotFound=PropertyReference 无法解析属性“{0}”。
ProtectionLevelIsNotSupported=仅通过 MessageContract 支持自定义 ProtectionLevel 设置。请为已实现协定“{1}”的操作“{0}”指定 MessageContract 类型。
ProtectionLevelNotSupported=工作流不支持 Faults 上的自定义 ProtectionLevel 设置。请不要在 FaultContract 上为已实现协定“{1}”的操作“{0}”指定 ProtectionLevel。
ProvidedStateInitializedForExecution=已经对运行时状态进行了初始化以便执行，无法更新该状态。需要从永久性存储中重新加载该状态。
ProviderDoesNotSupportCommand=InstanceStore 的永久性提供程序实现不支持名称为 {0} 的命令。请另选一个提供程序，或者确保不再使用这个永久性命令。
PublicChildrenChangeBlockDU=此活动不支持更改其公共子级(添加、移除或重新排列 Activities 或 ActivityDelegates)。
PublicEnvironmentAccessToNonGenericActivity=公共环境访问只对派生自 CodeActivity<TResult> 而非 CodeActivity 的活动才可用。
PublicMethodWithMatchingParameterDoesNotExist=“{0}”没有名为“{2}”的公共 {1} 方法与提供给 InvokeMethod“{3}”的参数类型、泛型类型参数、泛型类型约束相匹配。
PublicReferencesOnActivityRequiringArgumentResolution=活动“{0}”无法定义内置 Result 参数之外的参数，也无法通过 CodeActivityPublicEnvironmentAccessor 声明对公共位置的访问。请通过参数或通过 CodeActivityPublicEnvironmentAccessor.TryGetAccessToPublicLocation 和 TryGetReferenceToPublicLocation 将所有数据传入活动中。
QueryActivityIsInImplementation=此活动位于复合活动“{0}”的实现内部。若要查询其可更新性，请使用此复合活动的实现映射。
QueryActivityIsNotInDefinition=此活动不属于原始的或已更新的工作流定义。
QueryActivityIsPublic=此活动是根工作流定义的一部分。若要查询其可更新性，请使用工作流的更新映射，而不是复合活动“{0}”的实现映射。
QueryCorrelationInitializerCannotBeInitialized=没有可用于初始化 QueryCorrelationInitializer 的相关句柄。这是因为，没有针对查询初始值设定项上显式设置句柄，且没有可供从相关范围中使用的句柄。
QueryCorrelationInitializerWithEmptyMessageQuerySet=DisplayName 为“{0}”且 OperationName 为“{1}”的活动的 QueryCorrelationInitializer 具有空 MessageQuerySet。
QueryVariableIsInImplementation=此变量位于复合活动“{0}”的实现内部。若要查询其可更新性，请使用此复合活动的实现映射。
QueryVariableIsNotInDefinition=此变量不属于原始的或已更新的工作流定义。
QueryVariableIsNotPublic=此变量不是公共的。只有公共变量才能通过动态更新进行更改。
QueryVariableIsPublic=此变量是根工作流定义的一部分。若要查询其可更新性，请使用工作流的更新映射，而不是复合活动“{0}”的实现映射。
QueuingSqlRetry=正在将 SQL 重试排队，延迟 {0} 毫秒。
ReadAccessToWriteOnlyPublicReference=活动“{0}”无法从此公共位置引用读取，因为它是使用 ArgumentDirection.Out 声明的。若要允许读写，请使用 ArgumentDirection.InOut 声明此引用。
ReadNotSupported=在此流上不支持 Read。
ReadonlyNameScopeCannotBeUpdated=无法使用操作，因为名称作用域实现为只读。
ReadonlyPropertyCannotBeSet=在此上下文中无法使用属性或索引器“{0}.{1}”，因为无法访问 set 访问器。
ReceiveAndReceiveParametersHaveSameName=ReceiveContent 类型不同的两个 Receive 有着相同的 ServiceContractName 和 OperationName“{0}”。
ReceiveContentChanged=此接收活动的内容已在无类型内容和类型内容之间做出更改。
ReceiveCorrelationInitializiersChanged=此接收活动的 CorrelationInitializers 已更改。
ReceiveIsInTRSWhenTransactionFlowNotAllowed=当已实现协定“{1}”中的操作“{0}”的 TransactionFlowOption 设置为 NotAllowed 时，Receive 处于 TransactedReceiveScope 中。
ReceiveIsNotInTRS=已实现协定“{1}”中的操作“{0}”要求流传递事务，但 Receive 活动不在 TransactedReceiveScope 中。
ReceiveMessageNeedsToPairWithSendMessageForTwoWayContract=Receive 活动配置有请求/回复操作“{0}”，但是没有 SendReply 与之配对。请用 SendReply 与 Receive 配对，并使用 CorrelationHandle 将两者关联。
ReceiveNotWithinATransactedReceiveScope=流入事务的 Receive 活动未包含在 TransactedReceiveScope 内。
ReceivePairedWithSendReplyAndSendReplyParameters=具有 SendMessageContent 的 SendReply 和具有 SendParametersContent 的 SendReply 都与 OperationName 为“{0}”的同一 Receive 配对。不允许这种情况。
ReceiveParametersContentDoesNotSupportMessage=DisplayName 为“{0}”的活动有一个名为“{1}”的参数，该参数为 Message 或 MessageContract。ReceiveParametersContent 不支持 Message 或 MessageContract。对于基于 Message 或 MessageContract 的内容，Content 属性应指定为 ReceiveMessageContent。
ReceiveReplyRequestCannotBeNull=活动“{0}”中的 Request 属性不能为 null。必须将该属性设置为属于此请求/回复对的 Send 活动。
ReferencedChildInIsNewlyAdded=不能对作为已导入子级的引用的活动调用此方法。请在调用此方法前检查 NativeActivityUpdateContext.IsReferenceToImportedChild。
RegisteredBookmarkScopeRequired=只有已注册的书签范围可以用于创建确定范围的书签。
RelativeUriRequiresBinding=Name 为“{0}”并具有 ServiceContract“{1}”的终结点所具有的相对 URI“{2}”无法转换为绝对 URI，因为终结点的 Binding 属性为 null。请设置 Binding 属性，或将相对 URI 改为绝对 URI。
RelativeUriRequiresHost=Name 为“{0}”并具有 ServiceContract“{1}”的终结点所具有的相对 URI“{2}”无法转换为绝对 URI，因为 GetAddress 方法的 host 参数为 null。请提供将承载该终结点的服务主机实例，或将相对 URI 改为绝对 URI。
RemovingTransitionsBlockDU=如果从正在执行的 State 中移除转换，则 StateMachine 不支持动态更新。
RenewLockSystemError=未能延长锁定到期日，锁定到期日已过，或者已删除锁定所有者。正在中止 SqlWorkflowInstanceStore。
ReplyShouldNotIncludeRequestReplyHandle=OperationName 为“{1}”的活动“{0}”不应包括其他相关中的请求/回复句柄。
RequestMustBeSpecified=必须在活动“{0}”中指定 Request 参数。
RequestReplyHandleShouldNotBePresentForOneWay=不应在单向 Send 或 Receive 活动上指定 RequestReplyCorrelationInitializer。初始化 RequestReply 相关性时，Send 应与 ReceiveReply 活动成对出现，Receive 应与 SendReply 活动成对出现。
RequiredArgumentValueNotSupplied=未提供必要活动参数“{0}”的值。
RequiredExtensionTypeNotFound=为运行此工作流必须配置一个“{0}”类型的扩展。
RequiredVariableCoundNotBeExtracted=在下列活动中没有必要变量 {0} 可供提取: {1}。
RequireExtensionOnlyAcceptsReferenceTypes=“{0}”为值类型。RequireExtension 仅接受引用类型。
ResponseContextIsNotNull=ResponseContext 不为 null。
ResultArgumentHasRequiredTypeAndDirection=活动作者提供的名为“Result”的 RuntimeArgument 必须有 ArgumentDirection Out 和类型 {0}。但它具有的是 ArgumentDirection {1} 和类型 {2}。
ResultArgumentMustBeBoundToResultProperty=活动作者提供的名为“Result”的 RuntimeArgument 必须绑定到活动的 Result 属性所返回的参数。
ResultArgumentMustBeSpecificType=此活动的 Result OutArgument 必须为 {0} 的 OutArgument。
ResultCannotBeSetOnArgumentExpressions=Activity<T> 用作参数的表达式时，无法对 Activity<T> 设置 Result OutArgument。
ResultMustBeSpecified=必须在活动“{0}”中指定 Result 参数。
RethrowMustBeAPublicChild=Rethrow 活动“{0}”不能在 TryCatch 活动的私有子级中使用。Rethrow 只能用在 TryCatch 活动的公共子级下。
RethrowNotInATryCatch=Rethrow 活动“{0}”必须是 TryCatch 活动的 Catch 处理程序的子级。
RetryingSqlCommandDueToSqlError=因 SQL 错误号 {0}，正在重试 SQL 命令。
ReturnTypeIncompatible=类型不匹配。类型“{2}”最佳匹配方法“{1}”的返回类型“{0}”与提供给 InvokeMethod“{3}”的“Result”参数不兼容，返回值的类型应为“{4}”。
ReturnValueMissing=协定“{2}”中的操作“{1}”缺少“{0}”类型的返回值参数。
RootActivityAlreadyAssociatedWithInstance=显示名称为“{0}”的活动已与实例关联。与实例关联后，活动的元数据就无法操作。此错误也可能指示您正尝试执行的工作流的根活动实际上是另一个工作流的一部分。
RootActivityCannotBeReferenced=活动“{0}”是根活动，不能由活动“{1}”引用。
RootArgumentViolationsFound=为根活动的参数提供的值不满足根活动的要求:
RootArgumentViolationsFoundNoInputs=根活动的参数设置不正确。请修改工作流定义或提供输入值，以便纠正这些错误:
RunnableInstancesDetectionError=由于下列异常，导致可运行实例检测失败
RuntimeArgumentBindingInvalid=RuntimeArgument“{0}”指向一个 Argument，后者依次绑定到名为“{1}”的 RuntimeArgument。请确保 Argument 对象未绑定到多个 RuntimeArgument 对象，或由多个公共 Argument 属性共享。
RuntimeArgumentChangeBlockDU=活动“{0}”内部将不允许动态更新，因为它的 RuntimeArguments 已更改。若要在此活动内部启用动态更新，则不能添加、移除和重新排列任何 RuntimeArguments。另外也不能更改其名称、类型和方向。
RuntimeArgumentNotCreated=目前尚未创建 RuntimeArgument 实例。
RuntimeArgumentNotOpen=无法使用参数“{0}”。请确保在活动中声明了该参数。
RuntimeDelegateArgumentDirectionIncorrect=RuntimeDelegateArgument 的方向必须与其绑定到的 DelegateArgument 的方向匹配。
RuntimeDelegateArgumentTypeIncorrect=RuntimeDelegateArgument 的类型必须与其绑定到的 DelegateArgument 的类型匹配。
RuntimeOperationInProgress=已有另一个运行时操作正在进行中。对 WorkflowInstance 的访问必须由调用方进行同步。
RuntimeRunning=工作流运行时当前正在执行工作流，而操作仅在工作流暂停时才能执行。对 WorkflowInstance 的访问必须由调用方进行同步。
RuntimeTransactionAlreadyExists=已经用事务配置了运行时。一次只允许一个事务。
RuntimeTransactionComplete=运行时事务已完成，状态为“{0}”。
RuntimeTransactionCompletionRequested=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”已安排了运行时事务的完成。
RuntimeTransactionHandleNotRegisteredAsExecutionProperty=仅当相应的 RuntimeTransactionHandle 对象注册为执行属性时，才能调用方法“{0}”。
RuntimeTransactionIsSuppressed=禁止运行时事务后，此操作无效。由于对当前环境中的 RuntimeTransactionHandle 设置了 SuppressTransaction 属性，因此禁止了运行时事务。
RuntimeTransactionSet=运行时事务已经由 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”设置。执行独立于 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
SameUserStateUsedForMultipleInvokes=对于并发的活动调用，不能使用相同的用户状态实例。
SavingActivityToXamlNotSupported=不支持将 DynamicActivity 或 Activity.Implementation 保存为 XAML 格式。如果您尝试构造参数化工作流并将其保存为 XAML 格式，可以考虑使用 ActivityBuilder 类。
SavingFuncToXamlNotSupported=不支持将常规的 Func<T> 保存到 XAML。若要将某个对象转换为可序列化的 Func，请将该对象序列化为 XAML，然后调用 ActivityXamlServices.CreateFactory。
ScheduleBookmarkWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 BookmarkWorkItem。BookmarkName: {3}，BookmarkScope: {4}。
ScheduleCancelActivityWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 CancelActivityWorkItem。
ScheduleCompletionWorkItem=已为父级 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 CompletionWorkItem。完成了 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
ScheduleExecuteActivityWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 ExecuteActivityWorkItem。
ScheduleFaultWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 FaultWorkItem。异常是从 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”传播的。
ScheduleRuntimeWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了运行时工作项。
ScheduleTransactionContextWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 TransactionContextWorkItem。
SchemaContextFromBeforeInitializeComponentXBTExtensionCannotBeGeneric=由 BeforeInitializeComponent XAML 生成任务扩展({0})生成的 XAML 帮助程序类名称不能是泛型的。该资源可能尚未由 BeforeInitializeComponent XAML 生成任务扩展生成。请尝试重新生成项目。
SchemaContextFromBeforeInitializeComponentXBTExtensionNotFound=未找到 BeforeInitializeComponent XAML 生成任务扩展({0})生成的 XAML 帮助程序类名称。请尝试重新生成项目。
SeekNotSupported=在此流上不支持 Seek。
SendActivityCorrelationHandleNotFound=无法找到与名为“{0}”的 Send 活动关联的有效相关句柄。
SendMessageChannelCacheMiss=SendMessageChannelCache 未命中
SendMessageNeedsToPairWithReceiveMessageForTwoWayContract=Send 活动配置有请求/回复操作“{0}”，但是没有 ReceiveReply 活动与之配对。请用 ReceiveReply 与 Send 配对，并使用 CorrelationHandle 将两者关联。
SendNotSupported=不支持 Send。
SendParametersContentDoesNotSupportMessage=DisplayName 为“{0}”的活动有一个名为“{1}”的参数，该参数为 Message 或 MessageContract。SendParametersContent 不支持 Message 或 MessageContract。对于基于 Message 或 MessageContract 的内容，Content 属性应指定为 SendMessageContent。
SendReceiveExtensionNotFound=无法找到 SendReceiveExtension，请确保承载工作流的应用程序提供该扩展的一个实现。
SendRepliesHaveSameFaultTypeDifferentAction=两个 SendReply 活动的错误类型相同，但 Action 不同。
SendReplyRequestCannotBeNull=活动“{0}”中的 Request 属性不能为 null。必须将该属性设置为属于此请求/回复对的 Receive 活动
SendWithUninitializedCorrelatesWith=操作名称为“{0}”的活动具有未初始化的 CorrelatesWith 句柄。
SequenceDuplicateReferences=序列中包含多个对同一个导入子级的引用时，不支持动态更新。
ServiceEndpointAdded=已为地址“{0}”、绑定“{1}”和协定“{2}”添加了服务终结点。
ServiceHostExtensionAborted=无法完成操作，因为服务主机或其某个扩展已中止。
ServiceHostExtensionImmutable=使用仅在打开服务主机之前允许的服务主机扩展尝试某项操作。
ServiceInstanceTerminated=具有标识符“{0}”的服务实例已终止。
ServiceInstanceUnloaded=具有标识符“{0}”的服务实例已被卸载。
ServiceMetadataBehaviorNotFoundForServiceMetadataEndpoint=在服务 {0} 实现的协定列表中找不到协定名称“IMetadataExchange”。请将 ServiceMetadataBehavior 添加到配置文件或直接添加到 WorkflowServiceHost，以启用对该协定的支持。
SetupOrCleanupWorkflowThreadThrew=在设置或清理工作流线程时，IExecutionProperty 引发了异常。有关详细信息，请参见内部异常。
SFxTaskNotStarted=给定任务实例尚未启动。必须启动任务实例才能将其从操作返回。
ShipAssertExceptionMessage=发生了意外失败。应用程序不应尝试处理此错误。出于诊断目的，此英语消息与下列失败关联:“{0}”。
SimpleStateMustHaveOneTransition=状态“{0}”必须至少具有一个转换。
SpecialMethodNotFound=未找到类型“{1}”的特殊方法“{0}”。
SqlExceptionCaught=已捕获 SQL 异常编号为 {0} 的消息 {1}。
StartBookmarkWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 BookmarkWorkItem。BookmarkName: {3}，BookmarkScope: {4}。
StartCancelActivityWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 CancelActivityWorkItem。
StartCompletionWorkItem=开始为父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 CompletionWorkItem。完成了 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
StartExecuteActivityWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 ExecuteActivityWorkItem。
StartFaultWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 FaultWorkItem。异常是从 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”传播的。
StartRuntimeWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行运行时工作项。
StartSignpostEvent=活动边界。
StartSqlCommandExecute=正在开始 SQL 命令执行: {0}
StartTransactionContextWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 TransactionContextWorkItem。
StateCannotBeAddedTwice=不能向状态机添加状态“{0}”两次。一个状态机中的所有状态应是唯一的。
StateCannotBeSerialized=实例“{0}”无法运行或持久化，因为它有一个失败的动态更新。若要运行此实例，请从持久性存储中重新加载新副本。
StateMachineMustHaveInitialState=StateMachine“{0}”必须具有初始状态。
StateNotBelongToAnyParent=转换“{0}”的目标状态“{1}”必须属于状态机。
StopSignpostEvent=活动边界。
StoreReportedConflictingLockTokens=所用 InstanceStore 的永久性提供程序实现无效。该实现使用相同的 instanceOwnerId 值但不同的 lockToken 值调用了 BindInstanceOwner 两次。所用永久性提供程序应始终对一个实例所有者使用同一个 lockToken。
StoreViolationNoInstanceBound=所用 InstanceStore 的永久性提供程序实现无效。该实现在处理 LoadWorkflowByInstanceKeyCommand、LoadWorkflowCommand 或 TryLoadRunnableWorkflowCommand 时，未能将 InstanceHandle 绑定到某个实例并设置 InstanceState。
SubexpressionResultWasNotVisible=“{0}”类型的对象的子表达式生成的位置引用在此范围内不可见。
SubexpressionResultWasNull=“{0}”类型的对象的子表达式生成了 null 值。
SwitchCaseKeyTypesMustMatchExpressionType=Switch“{0}”事例包含 {1} 个与“{2}”表达式类型不兼容的键。
SwitchCaseNotFound=Switch 活动“{0}”找不到与 Expression 结果匹配的 Case 活动。
SwitchCaseNullWithValueType=存在 null 事例键，但 Switch 表达式的值类型为“{0}”。值类型不能为 null。
SwitchCaseTypeMismatch=事例键“{0}”不是“{1}”类型，并且不能与“InArgument<{1}>”类型的 Switch 表达式所生成的任何值匹配。
SymbolNamesMustBeUnique=已存在名为“{0}”的变量、RuntimeArgument 或 DelegateArgument。在环境作用域中，名称必须唯一。
SymbolResolverAlreadyExists=只能用一个 SymbolResolver 配置工作流实例。WorkflowInstanceExtensionManager 中已包含一个 SymbolResolver。
SymbolResolverDoesNotHaveSymbol=在此实例的 SymbolResolver 扩展中找不到类型为“{1}”的符号“{0}”。
SymbolResolverMustBeSingleton=SymbolResolver 不能用作基于实例的扩展。请使用 singletonObject 重载将 SymbolResolver 添加到 WorkflowInstanceExtensionManager 中。
TargetContractCannotBeOneWayWithTransactionFlow=协定定义无效: 在协定“{1}”的操作“{0}”中，单向操作的 TransactionFlowOption 设置为“强制”。
TargetTypeAndTargetObjectAreMutuallyExclusive=对于 {0}“{1}”，TargetType 与 TargetObject 互斥。
TargetTypeCannotBeEnum={0}“{1}”中操作数的类型不能为 enum 类型。
TargetTypeIsValueType=操作数的类型为值类型。对“{0}”“{1}”中字段的修改将不会生效。
TaskTimedOutError=该任务在 {0} 之后超时。分配给此操作的时间可能是较长超时的一部分。
TextExpressionCompilerActivityNameRequired=必须提供 TextExpressionCompilerSettings.ActivityName。
TextExpressionCompilerActivityNamespaceRequired=必须提供 TextExpressionCompilerSettings.ActivityNamespace。
TextExpressionCompilerActivityRequired=必须提供 TextExpressionCompilerSettings.Activity。
TextExpressionCompilerAddGeneratedFileRequired=必须提供 TextExpressionCompilerSettings.AddGeneratedFile。
TextExpressionCompilerLanguageRequired=必须提供 TextExpressionCompilerSettings.Language。
TextExpressionCompilerNoCodebase=为名称“{0}”加载的程序集不包含 CodeBase 值。CodeBase 对于编译是必需的。
TextExpressionCompilerOutputPathRequired=必须提供 TextExpressionCompilerSettings.OutputPath。
TextExpressionCompilerUnableToLoadAssembly=无法加载程序集“{0}”。
TextExpressionMetadataRequiresCompilation=表达式活动类型“{0}”需要编译才能运行。请确保已编译此工作流。
ThreadNeutralSemaphoreAborted=ThreadNeutralSemaphore 已中止。
ThrowingEtwException=正在引发异常。源: {0}。异常的详细信息: {1}
ThrowingEtwExceptionVerbose=正在引发异常。源: {0}。异常的详细信息: {1}
ThrowingException=正在引发异常。源: {0}。异常的详细信息: {1}
ThrowingExceptionVerbose=正在引发异常。源: {0}。异常的详细信息: {1}
TimedOutWaitingForLockResolution=永久性提供程序无法在提供的超时限制内回收锁。这可能表示因对由同一个 InstanceOwner 拥有的不同 InstanceHandle 同时执行命令而形成了死锁。为缓解这种情况，可以使用多个 InstanceOwner 或确保 InstancePersistenceCommand.AutomaticallyAcquiringLock 为不太可能获取实例锁的命令返回 false。
TimeoutInputQueueDequeue=Dequeue 操作在 {0} 之后超时。分配给该操作的时间可能已经是更长超时的一部分。
TimeoutMustBeNonNegative=参数 {0} 必须为非负超时值。而所提供的值为 {1}。
TimeoutMustBePositive=参数 {0} 必须为正超时值。而所提供的值为 {1}。
TimeoutOnOperation=操作在分配的超时 {0} 内没有完成。分配给该操作的时间可能已经是更长超时的一部分。
TimeoutOnSqlOperation=在分配的超时 {0} 内，操作没有完成。分配给该操作的时间可能已经是更长超时的一部分。
TimeoutOpeningSqlConnection=尝试打开 SQL 连接时超时。此操作没有在分配的超时限制 {0} 内完成。分配给此操作的时间可能是更长超时限制的一部分。
TimerExtensionAlreadyAttached=此 TimerExtension 已附加到工作流实例。
TimerExtensionRequiresWorkflowInstance=只有附加到工作流实例后才能使用 TimerExtension。
TooManyViolationsForExceptionMessage=<已截断> 异常消息已因大小问题而被截断。使用 ActivityValidationServices 查看所有冲突。
TraceCodeEventLogCritical=已写入到 EventLog。
TraceCodeEventLogError=已写入到 EventLog。
TraceCodeEventLogInfo=已写入到 EventLog。
TraceCodeEventLogVerbose=已写入到 EventLog。
TraceCodeEventLogWarning=已写入到 EventLog。
TraceCorrelationKeys=使用父作用域“{2}”中的值“{1}”计算出的相关键“{0}”。
TrackingDataExtracted=正在跟踪在活动 {1} 中提取的数据 {0}。
TrackingProfileNotFound=未找到 ActivityDefinitionId“{1}”的 TrackingProfile“{0}”。在配置文件中找不到 TrackingProfile，或 ActivityDefinitionId 不匹配。
TrackingRecordDropped=跟踪记录 {0} 的大小超出了 ETW 会话对提供程序 {1} 允许的最大值
TrackingRecordRaised=跟踪记录 {0} 提升为 {1}。
TrackingRecordTruncated=用提供程序 {1} 向 ETW 会话写入了截断的跟踪记录 {0}。已移除了变量/批注/用户数据
TrackingRelatedWorkflowAbort=调用跟踪参与者时发生了错误，导致实例中止。有关详细信息，请参见内部异常。
TrackingValueNotSerializable=所提取的参数/变量“{0}”不可序列化。
TransactedReceiveScopeEndCommitFailed=ID 为“{0}”的 CommittableTransaction 上的 EndCommit 调用引发了具有以下消息的 TransactionException:“{1}”。
TransactedReceiveScopeMustHaveValidReceive=TransactedReceiveScope“{0}”的 Request 属性必须设置为有效的 Receive 活动。
TransactedReceiveScopeRequiresReceive=必须设置 ReceiveActivity 属性，然后才能使用 TransactedReceiveScope“{0}”。
TransactionHandleAlreadyHasTransaction=TransactionHandle 已有事务。无法配置新事务。
TransactionInDoubtNonHost=虽然在调用 InstanceStore.Execute 或 BeginExecute 时不存在环境事务，但在处理命令过程中使用了内部事务。内部事务进入了 InDoubt 状态。
TransactionPersistenceTimeout=由于其他事务锁定了实例，因此请求已超时。
TransactionRolledBackNonHost=虽然在调用 InstanceStore.Execute 或 BeginExecute 时不存在环境事务，但在处理命令过程中使用了内部事务。内部事务已中止。
TransitionCannotBeAddedTwice=无法将转换“{0}”添加到状态“{1}”，因为它已添加到状态“{2}”。
TransitionTargetCannotBeNull=状态“{1}”的转换“{0}”的“To”属性不能为 null。
TriggerOrConditionChangedDuringTransitioning=如果正在执行的转换的 Trigger 或 Condition 活动已更改，则 StateMachine 不支持动态更新。
TriggerOrConditionIsReferenced=如果其任何 Trigger 或 Condition 是对导入的子项的引用，则 StateMachine 不支持动态更新。
TryCatchExceptionDuringCancelation=TryCatch 活动“{0}”的子活动在取消过程中引发了异常。
TryCatchExceptionFromCatchOrFinally=与 TryCatch 活动“{0}”关联的 Catch 或 Finally 活动引发了异常。
TryCatchExceptionFromTry=TryCatch 活动“{0}”捕获了“{1}”类型的异常。
TryCatchInvalidStateForUpdate=无法在 TryCatch 内部更新，因为已捕获到“{0}”类型的异常，但匹配的 catch 块已移除。
TryCommandCannotExecuteSubCommandsAndReduce=所用 InstanceStore 的永久性提供程序实现无效。该实现在使用 InstancePersistenceContext.Execute (或 BeginExecute)执行嵌套命令之后，从 TryCommand (或 EndTryCommand)返回的是 false。如果永久性提供程序理解命令并按命令操作，则返回的一定是 true。
TryLoadRequiresOwner=WorkflowApplication.LoadRunnableInstance 操作需要显式创建的 InstanceOwner。若要使用此方法，请创建一个具有工作流主机类型的实例所有者，并将其设置为 InstanceStore 的 DefaultInstanceOwner。
TryLoadRequiresWorkflowType=为了匹配和加载存储中的可运行实例，请求 InstanceOwner 在创建时必须具有指定的工作流主机类型。为此，在发出命令时，请向 CreateWorkflowOwnerCommand.InstanceOwnerMetadata 属性包中添加一个键值对。该键为文档中提供的 WorkflowHostType 键。值必须为 XName，并与所加载的实例的类型匹配。
TryRegisterRequestContextFailed=未正确使用相关处理程序上的某些上下文。确保由运行时正确初始化处理程序，并且工作流有后跟 Receive 或 ReceiveReply 活动的 Send。
TwoReceiveParametersWithSameNameButDifferentParameterCount=ServiceContractName 和 OperationName 都为“{0}”的两个 ReceiveParametersContent 对象有着不同的参数个数。
TwoReceiveParametersWithSameNameButDifferentParameterName=ServiceContractName 和 OperationName 都为“{0}”的两个 ReceiveParametersContent 对象有着不同的参数名称。
TwoReceiveParametersWithSameNameButDifferentParameterType=ServiceContractName 和 OperationName 都为“{0}”的两个 ReceiveParametersContent 对象有着不同的参数类型。
TwoReceivesWithSameNameButDifferentAction=ServiceContractName 和 OperationName 都为“{0}”的两个 Receive 对象有着不同的 Action。
TwoReceivesWithSameNameButDifferentIsOneWay=ServiceContractName 和 OperationName 都为“{0}”的两个 Receive 对象有着不同的 IsOneWay 值。
TwoReceivesWithSameNameButDifferentTxProperties=具有相同 ServiceContractName 和 OperationName“{0}”的两个 Receive 对象有着不同的事务属性。
TwoReceivesWithSameNameButDifferentValueType=ServiceContractName 和 OperationName 都为“{0}”的两个 Receive 对象有着不同的 ValueType。
TwoSendRepliesWithSameNameButDifferentAction=ServiceContractName 和 OperationName 都为“{0}”的两个 SendReply 对象有着不同的 Action。
TwoSendRepliesWithSameNameButDifferentValueType=ServiceContractName 和 OperationName 都为“{0}”的两个 SendReply 对象有着不同的 ValueType。
TwoSendReplyParametersWithSameNameButDifferentParameterCount=ServiceContractName 和 OperationName 都为“{0}”的两个 SendParametersContent 对象有着不同的参数个数。
TwoSendReplyParametersWithSameNameButDifferentParameterName=ServiceContractName 和 OperationName 都为“{0}”的两个 SendParameters 对象有着不同的参数名称。
TwoSendReplyParametersWithSameNameButDifferentParameterType=ServiceContractName 和 OperationName 都为“{0}”的两个 SendParameters 对象有着不同的参数类型。
TwoWayIsImplementedAsOneWay=协定“{1}”中的操作“{0}”指定为双向，但缺少 SendReply。请为该操作添加一个 SendReply 活动。
TypeConverterHelperCacheAddFailed=未能向帮助器的内部缓存添加“{0}”类型的 TypeConverterHelper。
TypeMismatchForAssign=在 Assign 活动“{2}”中，无法从“{0}”类型向“{1}”类型赋值。
TypeMustbeValueType=类型“{0}”必须为值类型。
TypeNotAssignableTo={0} 不能赋值给 {1}。
UnableToDeserializeHttpResponseContent=无法反序列化“{0}”类型的 ResponseContent。
UnableToLocateCompiledLocationContext=无法定位已编译位置“{0}”的 ICompiledExpressionRoot。请确保已编译包含此表达式的活动的定义。
UnableToOpenAndRegisterStore=无法初始化 InstanceStore。
UnconditionalTransitionShouldNotShareNullTriggersWithOthers=状态“{1}”的无触发器转换“{0}”必须包含条件。一个状态只能具有一个无触发器的无条件转换。
UnconditionalTransitionShouldNotShareTriggersWithOthers=状态“{1}”的转换“{0}”是无条件转换。它不能与其他转换共享同一触发器“{2}”。
UnexpectedArgumentCount=集合“{0}”中指定的参数个数为“{1}”，而预期个数为“{2}”。
UnexpectedExpressionNodeType=应该为“{0}”类型的表达式节点，但提供的是“{1}”类型的表达式节点。
UnhandledException=未经处理的异常。异常的详细信息: {0}
UninitializedCannotHaveData=所用 InstanceStore 的永久性提供程序实现无效。该实现报告要加载的状态为 InstanceState.Uninitialized 的实例含有实例数据。未初始化的实例不应含有实例数据。
UnInitializedRuntimeTransactionHandle=指定的 RuntimeTransactionHandle 未正确初始化。
UnknownCompressionOption=请求的压缩选项 {0} 不是有效选项。
UnknownDatabaseVersion=无法确定数据库版本，因为在 System.Activities.DurableInstancing.SqlWorkflowInstanceStoreVersionTable 中未找到任何行。此表应包含单一行，对应于创建数据库所用的或数据库升级到的框架版本。
UnknownExpressionCompilationError=处理表达式“{0}”时发生未知错误。处理表达式文本没有导致异常，但也没有创建可执行的表达式。
UnknownLanguage=无法使用“{0}”作为表达式的语言。
UnknownSprocResult=存储过程返回了未知的执行结果 {0}。
UnlockInstanceException=尝试解除实例锁定时遇到异常 {0}。
UnmatchedNoPersistExit=在 NoPersistHandle 上有一个不匹配的退出。每次进入后只能调用一个退出。
UnopenedActivitiesCannotBeExecuted=只能执行打开的活动。活动“{0}”尚未打开。
UnsupportedExpressionType=不支持“{0}”类型的表达式。
UnsupportedLocationReferenceValue=LocationReference 值必须为 Variable、RuntimeArgument 或 DelegateArgument。
UnsupportedMemberExpressionWithType=不支持检索“{0}”类型成员的 MemberExpression。
UnsupportedReferenceExpressionType=LValue 不支持“{0}”类型的表达式。
UnusedInputArguments=输入字典中的以下键未映射到参数，必须移除这些键: {0}。请注意，参数名称区分大小写。
UnwrappedMessageNotSupported=使用 MessageContracts 仅支持未封装的消息。请将 MessageContract 类型用于已实现协定“{1}”的操作“{0}”。
UpdateDefinitionNotFound=WorkflowIdentity“{0}”与任何承载的 WorkflowServices 都不匹配。
UpdateMapBuilderRequiredProperty=必须设置 DynamicUpdateMapBuilder 的属性“{0}”。
UpdateMapNotFound=没有适用于从 WorkflowIdentity“{0}”更新为“{1}”的 DynamicUpdateMap。
UpdateSymbolsMustMatch=原始工作流和已更新工作流必须具有相同的外部符号的计数、名称、类型和顺序。
UriBaseMustBeSpecified=必须在活动“{0}”中指定 UriBase 参数。
UseInstanceStoreInsteadOfPersistenceProvider=System.ServiceModel.Activities.WorkflowServiceHost 与 System.ServiceModel.Persistence.PersistenceProviderBehavior 不兼容。应移除 PersistenceProviderBehavior 或派生类，如 SqlPersistenceProviderBehavior。若要对 WorkflowServiceHost 启用持久性，应改用安装 System.Runtime.DurableInstancing.InstanceStore 的行为，如 SqlInstanceStoreBehavior。
ValidateUnlockInstance=实例永久性系统无法处理无效的 InstancePersistenceCommand。当 CompleteInstance 属性设置为 true 时，该命令要求 UnlockInstance 属性也设置为 true。
ValidationContextCannotBeNull=名为“{1}”的 {0} 的 ToValidateContext 参数解析为 null。必须提供非 null 验证上下文对象。
ValidationErrorPrefixForHiddenActivity=活动“{0}”的私有实现具有以下验证错误:   
ValidationErrorPrefixForPublicActivityWithHiddenParent=活动“{0}”的私有实现在活动“{1}”中具有以下验证错误:   
ValueArgumentTypeNotDerivedFromValueType=Message 的 ArgumentType 不是从 OperationName 为“{1}”的活动“{0}”中的 DeclaredMessageType 派生的。
ValueCannotBeNegative=“{0}”应大于或等于零。
ValueCannotBeNull=必须在 OperationName 为“{1}”的活动“{0}”中设置 Content 属性。
ValueCollectionUpdatesNotAllowed=不允许对从字典派生的值集合进行转变。
ValueMustBeAssignableToType=所提供的值必须赋给所提供的类型。
ValueMustBeNonNegative=值必须为非负值。
ValueTooLarge=不处理大于 Int32.MaxValue 的“{0}”。若要禁用超时，请指定 TimeSpan.MaxValue。
VariableAlreadyInUseOnActivity=无法对活动“{1}”使用变量“{0}”，因为活动“{2}”已使用了该变量。
VariableCannotBePopulatedInLocationEnvironment=不能在 LocationEnvironment 中填充变量 {0}。
VariableDoesNotExist=此环境中不存在变量“{0}”。
VariableExpressionTypeMismatch=变量“{0}”的 Default 需要类型“{1}”，但提供了结果类型为“{2}”的 Activity。
VariableIsReadOnly=变量“{0}”为只读，无法修改。
VariableMustBeSet=调用 CacheMetadata 之前必须设置变量。
VariableNameNotAnIdentifier=无法序列化变量名称“{0}”，因为它不代表有效的标识符。
VariableNotOpen=无法使用“{1}”类型的变量“{0}”。请确保在 Activity 或 SymbolResolver 中声明了该变量。
VariableNotVisible=已引用的 Variable 对象(Name 为“{0}”)在此范围内不可见。可能在此范围内可见的另一个同名位置引用，但它并不引用同一个位置。
VariableOnlyAccessibleAtScopeOfDeclaration=活动“{0}”无法访问此变量，因为此变量是在活动“{1}”的范围中声明的。活动只能访问其自己的实现变量。
VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported=不支持向已完成的活动添加补偿处理程序或确认处理程序可以引用的变量或参数。
VariableOrArgumentDoesNotExist=此环境中不存在变量或参数“{0}”。
VariableShouldBeOpen=在使用变量“{0}”之前，它必须包含在活动中。
VariableTypeInvalid=变量“{0}”无法用于“{1}”类型的表达式中，因为它的类型为不兼容的“{2}”。
VariableTypeNotMatchLocationType=变量类型“{0}”与 Location 类型“{1}”不匹配。
VBExpressionTamperedSinceLastCompiled=GetExpressionTree 未能获取表达式树，原因是 VisualBasic 表达式文本或对其可见的 LocationReferenceEnvironment 自缓存后已发生更改。编译错误消息为: {0}。
WaitAlreadyInProgress=InstanceHandle 一次最多只能有一个正在进行的未处理 WaitForEvents 或 BeginWaitForEvents 操作。尝试了第二个操作。只能在上一个操作完成后调用 WaitForEvents / BeginWaitForEvents。
WaitForEventsTimedOut={0} 后 WaitForEvents 或 BeginWaitForEvents 操作超时。分配给该操作的时间可能已经是更长超时的一部分。
WDCDisposed=只能在获得 WorkflowDataContext 的活动范围内访问它。
WfMessageReceived=工作流已接收消息
WfMessageSent=已从工作流发送消息
WhileRequiresCondition=必须设置 Condition，然后才能使用 While 活动“{0}”。
WindowsGroupNotFound=找不到 Windows 组“{0}”。
WorkflowAbortedReason={0} InnerException 消息: {1}
WorkflowActivityResume=WorkflowInstance Id“{0}”E2E 活动
WorkflowActivityStart=WorkflowInstance Id“{0}”E2E 活动
WorkflowActivityStop=WorkflowInstance Id“{0}”E2E 活动
WorkflowActivitySuspend=WorkflowInstance Id“{0}”E2E 活动
WorkflowApplicationAborted=无法执行操作，因为 WorkflowApplication {0} 已中止。
WorkflowApplicationAlreadyHasId=由于读取了“Id”属性，因此已为 WorkflowApplication 生成一个实例 ID。生成 ID 之后，不能使用 WorkflowApplication 加载实例。
WorkflowApplicationCompleted=WorkflowInstance Id“{0}”在“已关闭”状态下完成。
WorkflowApplicationIdled=WorkflowApplication ID“{0}”变为空闲状态。
WorkflowApplicationInstanceAbandoned=此 WorkflowApplicationInstance 已放弃或处于放弃过程中。无法对它执行任何进一步的操作。
WorkflowApplicationInstanceLoaded=此 WorkflowApplicationInstance 已与一个 WorkflowApplication 相关联。若要控制此实例，请使用该 WorkflowApplication。
WorkflowApplicationPersistableIdle=ID 为“{0}”的 WorkflowApplication 空闲且可持久化。将采取以下操作: {1}。
WorkflowApplicationPersisted=WorkflowApplication ID“{0}”已持久化。
WorkflowApplicationTerminated=WorkflowApplication ID“{0}”已终止。该应用程序因出现异常而在“出错”下状态完成。
WorkflowApplicationUnhandledException=WorkflowInstance Id“{0}”遇到了未经处理的异常。该异常来自 Activity“{1}”、DisplayName“{2}”。将进行以下操作: {3}。
WorkflowApplicationUnloaded=WorkflowInstance Id“{0}”已卸载。
WorkflowBehaviorWithNonWorkflowHost=“{0}”行为必须应用于 WorkflowServiceHost。
WorkflowCompletionAsyncResultCannotBeNull=从 OnBeginWorkflowCompleted 返回的 AsyncResult 不能为 null。
WorkflowControlEndpointDefaultBaseUriNotSupportedInPartialTrust=WorkflowControlEndpoint.DefaultBaseUri 的默认值在部分信任中不受支持。请使用配置或非默认构造函数指定 WorkflowControlEndpoint 的绑定和地址。
WorkflowIdentityNullHostId=无法在没有指定 WorkflowIdentity 的主机中加载用 WorkflowIdentity (“{0}”)保留的实例。
WorkflowIdentityNullStateId=无法在指定了 WorkflowIdentity (“{0}”)的主机中加载未用 WorkflowIdentity 保留的实例。可以使用不同的定义加载此实例，或使用动态更新更新此实例。
WorkflowIdentityStateIdHostIdMismatch=加载的实例的 WorkflowIdentity (“{0}”)与提供的工作流定义的 WorkflowIdentity (“{1}”)不匹配。可以使用不同的定义加载此实例，或使用动态更新更新此实例。
WorkflowInstanceAborted=无法执行操作，因为 WorkflowInstance“{0}”已中止。
WorkflowInstanceAbortedRecordWithId=TrackRecord = WorkflowInstanceAbortedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
WorkflowInstanceCanceled=WorkflowInstance Id“{0}”在“已取消”状态下完成。
WorkflowInstanceCompleted=无法执行操作，因为 WorkflowInstance“{0}”已完成。
WorkflowInstanceIsReadOnly=WorkflowInstance“{0}”已开始运行后，就不能修改它。
WorkflowInstanceNotFoundInStore=在实例存储区中找到了实例“{0}”，但该实例不包含工作流。
WorkflowInstanceRecordWithId=TrackRecord= WorkflowInstanceRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，State = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
WorkflowInstanceSuspendedRecord=TrackRecord = WorkflowInstanceSuspendedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}
WorkflowInstanceSuspendedRecordWithId=TrackRecord = WorkflowInstanceSuspendedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
WorkflowInstanceTerminated=无法执行操作，因为 WorkflowInstance“{0}”已终止。
WorkflowInstanceTerminatedRecord=TrackRecord = WorkflowInstanceTerminatedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4}, Annotations = {5}, ProfileName = {6}
WorkflowInstanceTerminatedRecordWithId=TrackRecord = WorkflowInstanceTerminatedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
WorkflowInstanceUnhandledExceptionRecordWithId=TrackRecord = WorkflowInstanceUnhandledExceptionRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，SourceName = {4}，SourceId = {5}，SourceInstanceId = {6}，SourceTypeName={7}，Exception={8}，Annotations= {9}，ProfileName = {10}，WorkflowDefinitionIdentity = {11}
WorkflowInstanceUnloaded=无法执行操作，因为 WorkflowInstance“{0}”已被卸载。
WorkflowInstanceUnlocked=无法执行操作，因为 WorkflowInstance {0} 已解锁。
WorkflowInstanceUpdatedRecord=TrackRecord= WorkflowInstanceUpdatedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，State = {4}，OriginalDefinitionIdentity = {5}，UpdatedDefinitionIdentity = {6}，Annotations = {7}，ProfileName = {8}
WorkflowInstanceUpdateFailed=WorkflowInstance“{0}”未能更新为标识“{1}”。请检查跟踪输出以获取无法更新的执行活动的列表。
WorkflowMustBeHosted=请确保在 WorkflowServiceHost 中承载 Receive 活动。
WorkflowServiceDefinitionIdentityNotMatched=已加载实例的 WorkflowIdentity (“{0}”)与任何承载的 WorkflowServices 都不匹配。
WorkflowServiceHostCannotAddOrRemoveServiceDefinitionAfterOpen=在 WorkflowServiceHost 打开、出错、中止或关闭后，无法添加或移除 WorkflowService 定义。
WorkflowTerminatedExceptionDefaultMessage=Terminate 活动终止了工作流。
WorkItemAbortedInstance=处理当前工作项时出错，导致工作流中止。有关详细信息，请参见内部异常。
WrapperNotSupportedInMessageContract=使用 MessageContracts 仅支持自定义包装名称和命名空间。请将 MessageContract 类型用于已实现协定“{1}”中的操作“{0}”。
WriteAccessToReadOnlyPublicReference=活动“{0}”无法写入此公共位置引用，因为它是使用 ArgumentDirection.In 声明的。若要允许读写，请使用 ArgumentDirection.InOut 声明此引用。
WriteonlyPropertyCannotBeRead=在此上下文中无法使用属性或索引器“{0}.{1}”，因为无法访问 get 访问器。
WrongArgumentType=参数的类型错误。其类型为“{0}”，但必须可以为“{1}”赋值。
WrongCacheMetadataForCodeActivity=不得对 CodeActivity 或 AsyncCodeActivity 调用采用 ActivityMetadata 参数的 CacheMetadata 方法。这些类的正确 CacheMetadata 采用 CodeActivityMetadata 参数。
WrongCacheMetadataForNativeActivity=不得对 NativeActivity 调用采用 ActivityMetadata 参数的 CacheMetadata 方法。NativeActivity 的正确 CacheMetadata 采用 NativeActivityMetadata 参数。
WrongEnvironmentCount=活动“{0}”应具有“{1}”个参数、“{2}”个公共变量、“{3}”个私有变量以及“{4}”个运行时委托参数。实际值:“{5}”个参数、“{6}”个公共变量、“{7}”个私有变量以及“{8}”个运行时委托参数。
WrongMemberCount=所有者为“{0}”的 IdSpace 有“{1}”个成员；应为“{2}”。
WrongNumberOfArgumentsForActivityDelegate=ActivityDelegate 参数不匹配。检查活动配置，确保与所声明的 ActivityDelegate 同步。
WrongOnCreateDynamicUpdateMapForNativeActivity=不得对 NativeActivity 调用采用 UpdateMapMetadata 参数的 OnCreateDynamicUpdateMap 方法。NativeActivity 的正确 OnCreateDynamicUpdateMap 采用 NativeActivityUpdateMapMetadata 参数。
WrongOriginalEnvironmentCount=活动“{0}”的原始环境应具有“{1}”个参数、“{2}”个公共变量、“{3}”个私有变量以及“{4}”个运行时委托参数，总计为“{5}”。实际位置总数为“{6}”。
XamlBuildTaskResourceNotFound=未找到应由 XAML 生成任务({0})生成的 XAML 资源。请尝试重新生成项目。
XamlElementExpected=应为元素表示形式。
XamlElementExpectedAt=在行({0}, {1})处应为元素表示形式。
