event_ActionItemCallbackInvoked=已调用 IO 线程调度程序回调。
event_ActionItemScheduled=已调用 IO 线程调度程序回调。
event_ActivityCompleted=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”在“{3}”状态下完成。
event_ActivityScheduled=父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了子 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
event_AppDomainUnload=AppDomain 正在卸载。AppDomain.FriendlyName {0}，ProcessName {1}，ProcessId {2}。
event_AspNetRoute=添加了 serviceType 为“{1}”和 serviceHostFactoryType 为“{2}”的新 ASP.NET 路由“{0}”。
event_AspNetRoutingService=传入请求与带有地址 {0} 的 ASP.NET 路由中定义的某个 WCF 服务匹配。
event_BinaryMessageDecodingStart=BinaryMessageEncoder 已开始解码消息。
event_BinaryMessageEncodingStart=BinaryMessageEncoder 已开始编码消息。
event_BookmarkScopeInitialized=TemporaryId 为“{0}”的 BookmarkScope 已初始化，ID 为“{1}”。
event_BufferedAsyncWriteStart=BufferId:{0} 已完成将“{1}”个字节写入基础流。
event_BufferedAsyncWriteStop=编码器已以异步方式写入消息。
event_BufferOutOfOrderMessageNoBookmark=此时不能执行服务实例“{0}”上的操作“{1}”。服务实例准备好处理此特定操作时，将进行另一个尝试。
event_BufferOutOfOrderMessageNoInstance=此时不能执行操作“{0}”。服务实例准备好处理此特定操作时，将进行另一个尝试。
event_BufferPoolAllocation=池正在分配 {0} 个字节。
event_BufferPoolChangeQuota=BufferPool 的大小为 {0}，按 {1} 更改配额。
event_CacheRootMetadataStart=已在活动“{0}”上启动 CacheRootMetadata
event_CacheRootMetadataStop=已在活动 {0} 上停止 CacheRootMetadata。
event_CBAEntryRead=已处理的 ServiceActivation 元素的相对地址为“{0}”，规范化的相对地址为“{1}”。
event_CBAMatchFound=传入请求与带有地址“{0}”的 ServiceActivation 元素相匹配。
event_ChannelFactoryCreated=已创建 ChannelFactory。
event_ChannelInitializationTimeout={0}
event_ChannelReceiveStart=ChannelHandlerId:{0} - 消息接收循环已启动。
event_ChannelReceiveStop=ChannelHandlerId:{0} - 消息接收循环已停止。
event_ClientBaseCachedChannelFactoryCount=缓存的通道工厂数量为:“{0}”。最多可以缓存“{1}”个通道工厂。
event_ClientBaseChannelFactoryAgedOutofCache=通道工厂在缓存中已到期，因为缓存已达到其限制“{0}”。
event_ClientBaseChannelFactoryCacheHit=使用了在缓存中找到的匹配通道工厂。
event_ClientBaseUsingLocalChannelFactory=不使用缓存中的通道工厂，即禁用实例缓存。
event_ClientChannelOpenStart=ServiceChannel 打开启动。
event_ClientChannelOpenStop=ServiceChannel 打开停止。
event_ClientFormatterDeserializeReplyStart=客户端已开始反序列化答复消息。
event_ClientFormatterDeserializeReplyStop=客户端已完成反序列化答复消息。
event_ClientFormatterSerializeRequestStart=已开始客户端请求序列化。
event_ClientFormatterSerializeRequestStop=客户端已完成序列化请求消息。
event_ClientMessageInspectorAfterReceiveInvoked=调度程序对“{0}”类型的 ClientMessageInspector 调用了“AfterReceiveReply”。
event_ClientMessageInspectorBeforeSendInvoked=调度程序对“{0}”类型的 ClientMessageInspector 调用了“BeforeSendRequest”。
event_ClientOperationPrepared=客户端正在执行与协定“{1}”相关的操作“{0}”。消息将发送到“{2}”。
event_ClientParameterInspectorAfterCallInvoked=调度程序对“{0}”类型的 ClientParameterInspector 调用了“AfterCall”。
event_ClientParameterInspectorBeforeCallInvoked=调度程序对“{0}”类型的 ClientParameterInspector 调用了“BeforeCall”。
event_ClientReliableSessionReconnect=SessionId:{0} 正在重新连接。
event_ClientSendPreambleStart=客户端开始发送报头。
event_ClientSendPreambleStop=客户端停止发送报头。
event_CloseTimeout={0}
event_CompensationState=CompensableActivity“{0}”的状态为“{1}”。
event_CompilationStart=开始编译
event_CompilationStop=结束编译
event_CompileVbExpressionStart=正在编译 VB 表达式“{0}”
event_CompileVbExpressionStop=已完成编译 VB 表达式。
event_CompleteBookmarkWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 BookmarkWorkItem 已经完成。BookmarkName: {3}，BookmarkScope: {4}。
event_CompleteCancelActivityWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 CancelActivityWorkItem 已经完成。
event_CompleteCompletionWorkItem=父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 CompletionWorkItem 已经完成。完成了 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
event_CompleteExecuteActivityWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 ExecuteActivityWorkItem 已经完成。
event_CompleteFaultWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 FaultWorkItem 已经完成。异常是从 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”传播的。
event_CompleteRuntimeWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的运行时工作项已经完成。
event_CompleteTransactionContextWorkItem=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”的 TransactionContextWorkItem 已经完成。
event_ConcurrentCallsRatio=并发调用比率: {0}/{1}
event_ConcurrentInstancesRatio=并发实例比率: {0}/{1}
event_ConcurrentSessionsRatio=并发会话比率: {0}/{1}
event_ConnectionPoolMiss={0} 的池没有可用的连接，{1} 个连接忙。
event_ConnectionPoolPreambleFailed=ConnectionPoolPreambleFailed。
event_ConnectionReaderSendFault=连接读取器发送错误“{0}”。
event_CreateBookmark=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”创建了书签。BookmarkName: {3}，BookmarkScope: {4}。
event_CreateBookmarkScope=已创建 BookmarkScope: {0}。
event_CreateServiceHostStart=开始 CreateServiceHost
event_CreateServiceHostStop=结束 CreateServiceHost
event_CreateWorkflowServiceHostStart=CreateWorkflowServiceHost 开始
event_CreateWorkflowServiceHostStop=CreateWorkflowServiceHost 停止
event_DCDeserializeWithSurrogateStart=DataContract 开始使用代理项反序列化 {0}。
event_DCDeserializeWithSurrogateStop=DataContract 停止使用代理项反序列化。
event_DCGenReaderStart=DataContract 开始为 {1} 生成 {0} 读取器。
event_DCGenReaderStop=DataContract 生成停止。
event_DCGenWriterStart=DataContract 开始为 {1} 生成 {0} 编写器。
event_DCGenWriterStop=DataContract 停止生成编写器。
event_DCJsonGenReaderStart=Json 开始为 {1} 生成 {0} 读取器。
event_DCJsonGenReaderStop=Json 读取器生成停止。
event_DCJsonGenWriterStart=Json 开始为 {1} 生成 {0} 编写器。
event_DCJsonGenWriterStop=Json 生成编写器停止。
event_DCResolverResolve=DataContract 解析程序开始解析 {0}。
event_DCSerializeWithSurrogateStart=DataContract 开始使用代理项序列化 {0}。
event_DCSerializeWithSurrogateStop=DataContract 停止使用代理项序列化。
event_DecrementBusyCount=调用了 DecrementBusyCount。源: {0}
event_DiscoveryClientInClientChannelFailedToClose=在 DiscoveryClientChannel 内部创建的 DiscoveryClient 无法关闭，因此已中止。
event_DiscoveryClientProtocolExceptionSuppressed=关闭 DiscoveryClient 时，ProtocolException 被禁止。这可能是由于 DiscoveryService 仍在尝试向 DiscoveryClient 发送响应。
event_DiscoveryClientReceivedMulticastSuppression=DiscoveryClient 收到来自 DiscoveryProxy 的多播禁止消息。
event_DiscoveryMessageReceivedAfterOperationCompleted=messageId 为“{1}”的 {0} 消息被 DiscoveryClient 丢弃，因为相应的 {2} 操作已完成。
event_DiscoveryMessageWithInvalidContent=messageId 为“{1}”的 {0} 消息由于具有无效内容而被丢弃。
event_DiscoveryMessageWithInvalidRelatesToOrOperationCompleted=messageId 为“{1}”和 relatesTo 为“{2}”的 {0} 消息被 DiscoveryClient 丢弃，因为相应的 {3} 操作已完成或 relatesTo 值无效。
event_DiscoveryMessageWithInvalidReplyTo=messageId 为“{0}”的发现请求消息由于具有无效的 ReplyTo 地址而被丢弃。
event_DiscoveryMessageWithNoContent={0} 消息由于没有任何内容而被丢弃。
event_DiscoveryMessageWithNullMessageId={0} 消息由于消息标头不包含所需 MessageId 属性而被丢弃。
event_DiscoveryMessageWithNullMessageSequence=messageId 为“{1}”的 {0} 消息由于没有 DiscoveryMessageSequence 属性而被 DiscoveryClient 丢弃。
event_DiscoveryMessageWithNullRelatesTo=messageId 为“{1}”的 {0} 消息由于消息标头不包含所需的 RelatesTo 属性而被 DiscoveryClient 丢弃。
event_DiscoveryMessageWithNullReplyTo=messageId 为“{0}”的发现请求消息由于没有 ReplyTo 地址而被丢弃。
event_DispatchFailed=已调度“{0}”操作，但出现错误。
event_DispatchFormatterDeserializeRequestStart=调度程序已开始反序列化请求消息。
event_DispatchFormatterDeserializeRequestStop=调度程序已完成反序列化请求消息。
event_DispatchFormatterSerializeReplyStart=调度程序已开始序列化答复消息。
event_DispatchFormatterSerializeReplyStop=调度程序已完成序列化答复消息。
event_DispatchMessageBeforeAuthorization=启动授权以进行消息调度
event_DispatchMessageStart=消息调度已启动。
event_DispatchMessageStop=消息调度已完成
event_DispatchSessionFailed=会话调度失败。
event_DispatchSessionStart=会话调度已启动。
event_DispatchSessionSuccess=会话调度成功。
event_DispatchSuccessful=已成功调度“{0}”操作。
event_DuplicateCorrelationQuery=找到了含有 Where='{0}' 的重复 CorrelationQuery。计算相关性时将不使用此重复查询。
event_DuplicateDiscoveryMessage=messageId 为“{1}”的 {0} 消息由于重复而被丢弃。
event_EncryptedDataProcessingStart=加密的数据处理已开始。
event_EncryptedDataProcessingSuccess=加密的数据处理已成功。
event_EndpointDiscoverabilityDisabled=已禁用 EndpointAddress 为“{0}”且 ListenUri 为“{1}”的终结点的可发现性。
event_EndpointDiscoverabilityEnabled=已启用 EndpointAddress 为“{0}”且 ListenUri 为“{1}”的终结点的可发现性。
event_EndSqlCommandExecute=结束 SQL 命令执行: {0}
event_EnterNoPersistBlock=正在进入非持久块。
event_ErrorHandlerInvoked=调度程序使用“{2}”类型的异常调用了“{0}”类型的 ErrorHandler。ErrorHandled 为“{1}”。
event_EstablishConnectionStart=已为 {0} 开始建立连接。
event_EstablishConnectionStop=已建立连接。
event_EtwUnhandledException=未经处理的异常。异常的详细信息: {0}
event_ExecuteWorkItemStart=执行工作项启动
event_ExecuteWorkItemStop=执行工作项停止
event_ExitNoPersistBlock=正在退出非持久块。
event_FailFastException=FailFastException。
event_FaultProviderInvoked=调度程序使用“{1}”类型的异常调用了“{0}”类型的 FaultProvider。
event_FederationMessageCreationStarted=从窗体发布创建联合身份验证消息已开始。
event_FederationMessageCreationSuccess=从窗体发布创建联合身份验证消息已成功。
event_FederationMessageProcessingStarted=联合身份验证消息处理已开始。
event_FederationMessageProcessingSuccess=联合身份验证消息处理已成功。
event_FindInitiatedInDiscoveryClientChannel=在 DiscoveryClientChannel 中启动了一个 Find 操作以发现终结点。
event_FlowchartEmpty=Flowchart“{0}”- 在无节点的情况下执行。
event_FlowchartNextNull=Flowchart“{0}”/FlowStep - 下一个节点为 null。Flowchart 执行将结束。
event_FlowchartStart=Flowchart“{0}”- 已安排启动。
event_FlowchartSwitchCase=Flowchart“{0}”/FlowSwitch - 选择 Case“{1}”。
event_FlowchartSwitchCaseNotFound=Flowchart“{0}”/FlowSwitch - 找不到 Case 活动，也找不到与 Expression 结果匹配的 Default Case。Flowchart 执行将结束。
event_FlowchartSwitchDefault=Flowchart“{0}”/FlowSwitch - 选择了 Default Case。
event_FoundProcessingError=命令失败: {0}
event_GenXmlSerializableStart=开始为“{0}”生成 Xml 可序列化内容。
event_GenXmlSerializableStop=生成 Xml 可序列化内容停止。
event_GetIssuerNameFailure=从 tokenId {0} 检索颁发者名称已失败。
event_GetIssuerNameSuccess=从 tokenId {1} 检索颁发者名称 {0} 已成功。
event_GetServiceInstanceStart=服务实例检索已启动。
event_GetServiceInstanceStop=已检索服务实例。
event_HandledException=正在处理异常。异常的详细信息: {0}
event_HandledExceptionError=正在处理异常。异常的详细信息: {0}
event_HandledExceptionVerbose=正在处理异常。异常的详细信息: {0}
event_HandledExceptionWarning=正在处理异常。异常的详细信息: {0}
event_HostedTransportConfigurationManagerConfigInitStart=HostedTransportConfigurationManager 开始配置初始化
event_HostedTransportConfigurationManagerConfigInitStop=HostedTransportConfigurationManager 结束配置初始化
event_HttpAuthFailed=Http 身份验证失败。
event_HttpChannelRequestAborted=Http 通道请求已中止。
event_HttpChannelResponseAborted=Http 通道响应已中止。
event_HttpContextBeforeProcessAuthentication=启动身份验证以进行消息调度
event_HttpGetContextStart=HttpGetContext 启动。
event_HttpHandlerPickedForUrl=URL“{0}”承载含有根元素类型“{1}”的 XAML 文档。选取 HTTP 处理程序类型“{2}”为对此 URL 做出的所有请求提供服务。
event_HttpMessageReceiveFailed=Http 消息接收失败。
event_HttpMessageReceiveStart=已从 http 传输接收消息。
event_HttpPipelineBeginProcessInboundRequestStart=Http 消息处理程序已开始以异步方式处理入站请求。
event_HttpPipelineBeginProcessResponseStart=Http 消息处理程序已开始以异步方式处理响应。
event_HttpPipelineFaulted=Http 消息处理程序出错。
event_HttpPipelineProcessInboundRequestStart=Http 消息处理程序已开始处理入站请求。
event_HttpPipelineProcessInboundRequestStop=Http 消息处理程序已完成处理入站请求。
event_HttpPipelineProcessResponseStart=Http 消息处理程序已开始处理响应。
event_HttpPipelineProcessResponseStop=Http 消息处理程序已完成处理响应。
event_HttpPipelineTimeoutException=WebSocket 连接超时。
event_HttpResponseReceiveStart=Http 传输已开始接收消息。
event_HttpSendMessageStart=Http 发送请求启动。
event_HttpSendStop=Http 发送请求停止。
event_HttpSendStreamedMessageStart=Http 发送流处理消息已启动。
event_IdleServicesClosed=总计 {1} 个已激活服务中的 {0} 个空闲服务已关闭。
event_IdleTimeout={0} 连接池键: {1}
event_ImportKnownTypesStart=ImportKnownTypes 开始。
event_ImportKnownTypesStop=ImportKnownTypes 停止。
event_InactivityTimeout={0}
event_InArgumentBound=Activity“{1}”、DisplayName“{2}”、InstanceId“{3}”的 In 参数“{0}”已经与值 {4} 绑定。
event_IncomingMessageVerified=已验证传入消息。
event_IncrementBusyCount=调用了 IncrementBusyCount。源: {0}
event_InferredContractDescription=已从 WorkflowService 中推断出含有 Name='{0}' 和 Namespace='{1}' 的 ContractDescription。
event_InferredOperationDescription=已从 WorkflowService 中推断出协定“{1}”中含有 Name='{0}' 的 OperationDescription。IsOneWay={2}。
event_InnerChannelCreationFailed=DiscoveryClientChannel 无法使用 EndpointAddress 为“{0}”且 Via 为“{1}”的已发现终结点创建通道。DiscoveryClientChannel 现在将尝试使用下一个可用的已发现终结点。
event_InnerChannelOpenFailed=DiscoveryClientChannel 无法使用 EndpointAddress 为“{0}”且 Via 为“{1}”的已发现终结点打开通道。DiscoveryClientChannel 现在将尝试使用下一个可用的已发现终结点。
event_InnerChannelOpenSucceeded=DiscoveryClientChannel 成功发现了一个终结点并使用它打开了通道。客户端使用 EndpointAddress 为“{0}”且 Via 为“{1}”的终结点连接到服务。
event_InstanceLocksRecoveryError=由于下列异常，导致实例锁恢复失败
event_InternalCacheMetadataStart=已在活动“{0}”上启动 InternalCacheMetadata。
event_InternalCacheMetadataStop=已在活动“{0}”上停止 InternalCacheMetadata。
event_InvokedMethodThrewException=在活动“{0}”调用的方法中，引发了异常。{1}
event_InvokeMethodDoesNotUseAsyncPattern=InvokeMethod“{0}”- 方法不使用异步模式。
event_InvokeMethodIsNotStatic=InvokeMethod“{0}”- 方法非静态。
event_InvokeMethodIsStatic=InvokeMethod“{0}”- 方法为静态。
event_InvokeMethodUseAsyncPattern=InvokeMethod“{0}”- 方法使用“{1}”和“{2}”的异步模式。
event_JsonMessageDecodingStart=JsonMessageEncoder 已开始解码消息。
event_JsonMessageEncodingStart=JsonMessageEncoder 已开始编码消息。
event_LeaseTimeout={0} 连接池键: {1}
event_ListenerOpenStart=正在为“{0}”打开侦听器。
event_ListenerOpenStop=侦听器打开已完成。
event_LockRetryTimeout=尝试获取实例锁时超时。操作在分配的超时 {0} 内没有完成。分配给该操作的时间可能已经是更长超时的一部分。
event_MaximumRetriesExceededForSqlCommand=正在放弃重试 SQL 命令，因为执行次数已达到了允许的最多重试次数。
event_MaxInstancesExceeded=系统达到了所设置的中止值“MaxConcurrentInstances”。将中止值设置为 {0}。通过修改 serviceThrottle 元素中的特性“maxConcurrentInstances”或通过修改行为 ServiceThrottlingBehavior 中的“MaxConcurrentInstances”属性，可更改中止值。
event_MaxOutboundConnectionsPerEndpointExceeded={0}
event_MaxPendingConnectionsExceeded={0}
event_MaxPendingMessagesPerChannelExceeded=达到了“{0}”的中止值“MaxPendingMessagesPerChannel”。若要增加此限制，请调整 BufferedReceiveServiceBehavior 中的 MaxPendingMessagesPerChannel 属性。
event_MaxReceivedMessageSizeExceeded={0}
event_MaxRetryCyclesExceededMsmq=对于 id 为“{0}”的 MSMQ 消息，已超过最大重试周期数
event_MaxSentMessageSizeExceeded={0}
event_MaxSessionSizeReached={0}
event_MessageInspectorAfterReceiveInvoked=调度程序对“{0}”类型的 MessageInspector 调用了“AfterReceiveReply”。
event_MessageInspectorBeforeSendInvoked=调度程序对“{0}”类型的 MessageInspector 调用了“BeforeSendRequest”。
event_MessageLogEventSizeExceeded=无法记录消息，因为它超出了 ETW 事件大小
event_MessageLogInfo={0}
event_MessageLogWarning={0}
event_MessageQueueDuplicatedSocketComplete=MessageQueueDuplicatedSocketComplete
event_MessageQueueDuplicatedSocketError=消息队列无法复制套接字。
event_MessageQueueRegisterAbort=URI“{1}”的消息队列注册已中止，状态为“{0}”。
event_MessageQueueRegisterCompleted=URI“{0}”的消息队列注册已完成。
event_MessageQueueRegisterFailed=URI“{0}”的消息队列注册已失败，状态为“{1}”。
event_MessageQueueRegisterStart=消息队列注册开始。
event_MessageQueueUnregisterSucceeded=URI“{0}”的消息队列注销已成功。
event_MessageReadByEncoder=编码器已读取大小为“{0}”字节的消息。
event_MessageReceivedByTransport=传输从“{0}”收到了一条消息。
event_MessageReceivedFromTransport=调度程序从传输收到一条消息。相关 ID 为“{0}”。
event_MessageSentByTransport=传输向“{0}”发送了一条消息。
event_MessageSentToTransport=调度程序向传输发送了一条消息。相关 ID 为“{0}”。
event_MessageThrottleAtSeventyPercent=“{1}”的中止值“{0}”为 70%%。
event_MessageThrottleExceeded=达到了“{1}”的中止值“{0}”。
event_MessageWrittenAsynchronouslyByEncoder=编码器已以异步方式写入消息。
event_MessageWrittenByEncoder=编码器已写入大小为“{0}”字节的消息。
event_MtomMessageDecodingStart=MtomMessageEncoder 已开始解码消息。
event_MtomMessageEncodingStart=MtomMessageEncoder 已开始编码消息。
event_NamedPipeCreated=已创建 NamedPipe“{0}”。
event_NegotiateTokenAuthenticatorStateCacheExceeded={0}
event_NegotiateTokenAuthenticatorStateCacheRatio=协商令牌身份验证器状态缓存的比率: {0}/{1}
event_OpenListenerChannelInstanceFailed=错误代码: {0}
event_OpenTimeout={0}
event_OperationCompleted=OperationInvoker 已完成对“{0}”方法的调用。该方法调用持续了“{1}”毫秒。
event_OperationFailed=“{0}”方法在由 OperationInvoker 调用时引发了未经处理的异常。该方法调用持续了“{1}”毫秒。
event_OperationFaulted=“{0}”方法在由 OperationInvoker 调用时引发了 FaultException。该方法调用持续了“{1}”毫秒。
event_OperationInvoked=OperationInvoker 调用了“{0}”方法。调用方信息: “{1}”。
event_OutboundConnectionsPerEndpointRatio=每个终结点的出站连接比率: {0}/{1}
event_OutgoingMessageSecured=已保护传出消息的安全。
event_ParameterInspectorAfterCallInvoked=调度程序对“{0}”类型的 ParameterInspector 调用了“AfterCall”。
event_ParameterInspectorBeforeCallInvoked=调度程序对“{0}”类型的 ParameterInspector 调用了“BeforeCall”。
event_PendingAcceptsAtZero=剩下零个挂起的接受
event_PendingConnectionsRatio=挂起的连接比率: {0}/{1}
event_PendingMessagesPerChannelRatio=每个通道的挂起消息比率: {0}/{1}
event_PendingSessionQueueFull=对“{0}”的会话调度失败，因为挂起的会话队列已满，其中包含“{1}”个挂起项目。
event_PendingSessionQueueRatio=挂起会话队列比率: {0}/{1}
event_PipeConnectionAcceptStart=已在 {0} 上启动管道连接接受。
event_PipeConnectionAcceptStop=已接受管道连接。
event_PipeSharedMemoryCreated=已在“{0}”处创建管道共享内存。
event_PipeTransportListenerListeningStart=管道传输侦听器开始侦听 URI“{0}”。
event_PipeTransportListenerListeningStop=管道传输侦听器停止侦听。
event_PortSharingDuplicatedSocket=已为 {0} 复制套接字。
event_PrincipalSettingFromSessionTokenStarted=基于会话令牌的主体设置已开始。
event_PrincipalSettingFromSessionTokenSuccess=基于会话令牌的主体设置已成功。
event_QueryCompositionExecuted=对请求 URI“{1}”执行了使用“{0}”的查询组合。
event_QueuingSqlRetry=正在排队 SQL 重试操作，延迟为 {0} 毫秒。
event_ReadPoolMiss=已新建“{0}”
event_ReceiveContextAbandonFailed=未能放弃 {0}。
event_ReceiveContextAbandonWithException=放弃了 {0}，返回异常 {1}。
event_ReceiveContextCompleteFailed=未能完成 {0}。
event_ReceiveContextFaulted=接收上下文出错。
event_ReceiveRetryCountReached=对于 id 为“{0}”的 MSMQ 消息，已达到接收重试计数限制
event_ReceiveTimeout={0}
event_ReliableSessionChannelFaulted=SessionId:{0} 出错。
event_RenewLockSystemError=未能延长锁定到期日，锁定到期日已过，或者已删除锁定所有者。正在中止 SqlWorkflowInstanceStore。
event_ResumeSignpostEvent=活动边界。
event_RetryingSqlCommandDueToSqlError=正在由于 SQL 错误号 {0} 而重试 SQL 命令。
event_RoutingServiceAbandoningReceiveContext=路由服务正在为 ID 是“{0}”的消息调用 ReceiveContext.Abandon。
event_RoutingServiceAbortingChannel=路由服务正在通道“{0}”上调用中止。
event_RoutingServiceChannelFaulted=路由服务客户端“{0}”出错。
event_RoutingServiceCloseFailed=关闭出站客户端“{0}”时，路由服务失败。
event_RoutingServiceClosingClient=路由服务正在关闭客户端“{0}”。
event_RoutingServiceCommittingTransaction=路由服务正在提交 ID 为“{0}”的事务。
event_RoutingServiceCompletingOneWay=路由服务单向消息正在完成。
event_RoutingServiceCompletingReceiveContext=路由服务正在为 ID 是“{0}”的消息调用 ReceiveContext.Complete。
event_RoutingServiceCompletingTwoWay=路由服务请求答复消息正在完成。
event_RoutingServiceConfigurationApplied=一个新的 RoutingConfiguration 已应用于路由服务。
event_RoutingServiceCreatingClientForEndpoint=路由服务正在为终结点“{0}”创建客户端。
event_RoutingServiceCreatingTransaction=路由服务创建了一个 ID 为“{0}”的新事务来处理消息。
event_RoutingServiceDisplayConfig=对路由服务进行了如下配置: RouteOnHeadersOnly: {0}，SoapProcessingEnabled: {1}，EnsureOrderedDispatch: {2}。
event_RoutingServiceDuplexCallbackException=路由服务组件 {0} 遇到了双工回调异常。
event_RoutingServiceFilterTableMatchStart=路由服务 MessageFilterTable 匹配开始。
event_RoutingServiceFilterTableMatchStop=路由服务 MessageFilterTable 匹配停止。
event_RoutingServiceHandledException=路由服务已处理异常。
event_RoutingServiceMessageRoutedToEndpoints=路由服务已将 ID 为“{0}”的消息路由到 {1} 个终结点列表。
event_RoutingServiceProcessingFailure=在地址为“{0}”的终结点上处理消息时，路由服务失败。
event_RoutingServiceProcessingMessage=路由服务正在处理事务 {3} 中收到的 ID 为“{0}”、操作为“{1}”、入站 URL 为“{2}”的消息。
event_RoutingServiceSendingFaultResponse=路由服务正在发回含有 Action“{0}”的错误响应消息。
event_RoutingServiceSendingResponse=路由服务正在发回含有 Action“{0}”的响应消息。
event_RoutingServiceTransmitFailed=向“{0}”发送时，路由服务失败。
event_RoutingServiceUsingExistingTransaction=路由服务将使用现有事务“{0}”发送消息。
event_RoutingTableLookupStart=已开始路由表查找。
event_RoutingTableLookupStop=已完成路由表查找。
event_RunnableInstancesDetectionError=由于下列异常，导致可运行实例检测失败
event_RuntimeTransactionComplete=运行时事务已在状态“{0}”下完成。
event_RuntimeTransactionCompletionRequested=Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”已安排了运行时事务的完成。
event_RuntimeTransactionSet=运行时事务已经由 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”设置。执行独立于 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
event_ScheduleBookmarkWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 BookmarkWorkItem。BookmarkName: {3}，BookmarkScope: {4}。
event_ScheduleCancelActivityWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 CancelActivityWorkItem。
event_ScheduleCompletionWorkItem=已为父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 CompletionWorkItem。完成了 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
event_ScheduleExecuteActivityWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 ExecuteActivityWorkItem。
event_ScheduleFaultWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 FaultWorkItem。异常是从 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”传播的。
event_ScheduleRuntimeWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了运行时工作项。
event_ScheduleTransactionContextWorkItem=已为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”安排了 TransactionContextWorkItem。
event_SecurityIdentityVerificationFailure=安全验证失败。
event_SecurityIdentityVerificationSuccess=安全验证成功。
event_SecurityImpersonationFailure=安全模拟失败。
event_SecurityImpersonationSuccess=安全模拟成功。
event_SecurityNegotiationProcessingFailure=安全协商处理失败。
event_SecurityNegotiationStart=安全协商已启动。
event_SecurityNegotiationStop=安全协商已完成。
event_SecuritySessionRatio=安全会话比率: {0}/{1}
event_SecurityTokenProviderOpened=SecurityTokenProvider 打开已完成。
event_SendMessageChannelCacheMiss=SendMessageChannelCache 未命中
event_SendTimeout={0}
event_SequenceAcknowledgementSent=SessionId:{0} 确认已发送。
event_ServerMaxPooledConnectionsQuotaReached=达到了服务器的最大池连接配额。
event_ServiceActivationAvailableMemory=可用内存(字节): {0}
event_ServiceActivationException=无法激活该服务。异常的详细信息: {0}
event_ServiceActivationStart=服务激活开始
event_ServiceActivationStop=服务激活停止
event_ServiceChannelBeginCallStart=ServiceChannel 异步调用已启动。
event_ServiceChannelCallStart=ServiceChannelCall 已启动。
event_ServiceChannelCallStop=客户端已执行完与协定“{1}”相关的操作“{0}”。消息已发送到“{2}”。
event_ServiceChannelOpenStart=ServiceChannelOpen 已启动。
event_ServiceChannelOpenStop=ServiceChannelOpen 已完成。
event_ServiceEndpointAdded=已为地址“{0}”、绑定“{1}”和协定“{2}”添加了一个服务终结点。
event_ServiceException=消息处理过程中出现了“{1}”类型的未经处理的异常。完整异常详细信息: {0}。
event_ServiceHostFactoryCreationStart=ServiceHostFactory 开始创建
event_ServiceHostFactoryCreationStop=ServiceHostFactory 结束创建
event_ServiceHostFaulted=服务主机出现故障。
event_ServiceHostOpenStart=ServiceHost 已开始打开。
event_ServiceHostOpenStop=ServiceHost 已完成打开。
event_ServiceHostStarted=ServiceHost 已启动:“{0}”。
event_ServiceSecurityNegotiationCompleted=服务安全协商已完成。
event_ServiceStartPipeError=服务启动管道出错。
event_SessionCookieReadingStarted=从会话 Cookie 读取会话令牌已开始。
event_SessionCookieReadingSuccess=从会话 Cookie 读取会话令牌已成功。
event_SessionIdleTimeout=会话正在中止 URI“{0}”的空闲通道。
event_SessionPreambleUnderstood=已理解“{0}”的会话报头。
event_SharedListenerProxyRegisterFailed=SharedListenerProxy 注册失败，状态为“{0}”。
event_SharedListenerProxyRegisterStart=已对 URI“{0}”启动 SharedListenerProxy 注册。
event_SharedListenerProxyRegisterStop=SharedListenerProxy 注册停止。
event_ShipAssertExceptionMessage=发生了意外失败。应用程序不应尝试处理此错误。出于诊断目的，此英语消息与下列失败关联: {0}。
event_SignatureVerificationStart=签名验证已开始。
event_SignatureVerificationSuccess=签名验证已成功
event_SocketAcceptClosed=套接字接受已关闭。
event_SocketAccepted=ListenerId:{0} 接受了 SocketId:{1}。
event_SocketAcceptEnqueued=连接接受已启动。
event_SocketAsyncReadStop=SocketId:{0} 从“{2}”读取“{1}”个字节。
event_SocketAsyncWriteStart=SocketId:{0} 正在将“{1}”个字节写入“{2}”。
event_SocketConnectionAbort=SocketId:{0} 正在中止。
event_SocketReadStop=SocketId:{0} 从“{2}”读取“{1}”个字节。
event_SocketWriteStart=SocketId:{0} 正在将“{1}”个字节写入“{2}”。
event_SqlExceptionCaught=已捕获 SQL 异常编号 {0} 消息 {1}。
event_SslOnAcceptUpgrade=SslOnAcceptUpgradeStop
event_SslOnInitiateUpgrade=SslOnAcceptUpgradeStart
event_StartBookmarkWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 BookmarkWorkItem。BookmarkName: {3}，BookmarkScope: {4}。
event_StartCancelActivityWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 CancelActivityWorkItem。
event_StartCompletionWorkItem=开始为父 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 CompletionWorkItem。完成了 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”。
event_StartExecuteActivityWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 ExecuteActivityWorkItem。
event_StartFaultWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 FaultWorkItem。异常是从 Activity“{3}”、DisplayName“{4}”、InstanceId“{5}”传播的。
event_StartRuntimeWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行运行时工作项。
event_StartSignpostEvent=活动边界。
event_StartSignpostEvent1=活动边界。
event_StartSqlCommandExecute=正在开始 SQL 命令执行: {0}
event_StartTransactionContextWorkItem=开始为 Activity“{0}”、DisplayName“{1}”、InstanceId“{2}”执行 TransactionContextWorkItem。
event_StopSignpostEvent=活动边界。
event_StopSignpostEvent1=活动边界。
event_StreamedMessageReadByEncoder=编码器已读取流处理消息。
event_StreamedMessageWrittenByEncoder=编码器已写入流处理消息。
event_SuspendSignpostEvent=活动边界。
event_SwitchCaseNotFound=Switch 活动“{0}”找不到与 Expression 结果匹配的 Case 活动。
event_SynchronizationContextReset=SynchronizationContext 已由 DiscoveryClientChannel 重置为其原始值 {0}。
event_SynchronizationContextSetToNull=在初始化 Find 操作之前，SynchronizationContext 已由 DiscoveryClientChannel 设置为 null。
event_TcpConnectionResetError=SocketId:{0} 到远程地址 {1} 出现连接重置错误。
event_TcpConnectionTimedOut=SocketId:{0} 到远程地址 {1} 超时。
event_TcpTransportListenerListeningStart=Tcp 传输侦听器正在开始侦听 URI“{0}”。
event_TcpTransportListenerListeningStop=Tcp 传输侦听器正在侦听。
event_TextMessageDecodingStart=TextMessageEncoder 已开始解码消息。
event_TextMessageEncodingStart=TextMessageEncoder 已开始编码消息。
event_ThrowingEtwException=正在引发异常。源: {0}。异常的详细信息: {1}
event_ThrowingEtwExceptionVerbose=正在引发异常。源: {0}。异常的详细信息: {1}
event_ThrowingException=正在引发异常。源: {0}。异常的详细信息: {1}
event_ThrowingExceptionVerbose=正在引发异常。源: {0}。异常的详细信息: {1}
event_TimeoutOpeningSqlConnection=尝试打开 SQL 连接时超时。操作在分配的超时 {0} 内没有完成。分配给该操作的时间可能已经是更长超时的一部分。
event_TokenValidationFailure=SecurityToken (类型为“{0}”，ID 为“{1}”)验证已失败。{2}
event_TokenValidationStarted=SecurityToken (类型为“{0}”，ID 为“{1}”)验证已开始。
event_TokenValidationSuccess=SecurityToken (类型为“{0}”，ID 为“{1}”)验证已成功。
event_TraceCodeEventLogCritical=已写入 EventLog。
event_TraceCodeEventLogError=已写入 EventLog。
event_TraceCodeEventLogInfo=已写入 EventLog。
event_TraceCodeEventLogVerbose=已写入 EventLog。
event_TraceCodeEventLogWarning=已写入 EventLog。
event_TraceCorrelationKeys=使用父作用域“{2}”中的值“{1}”计算出的相关键“{0}”。
event_TrackingDataExtracted=正在跟踪在活动 {1} 中提取的数据 {0}。
event_TrackingProfileNotFound=未找到 ActivityDefinitionId“{1}”的 TrackingProfile“{0}”。在配置文件中找不到 TrackingProfile，或 ActivityDefinitionId 不匹配。
event_TrackingRecordDropped=跟踪记录 {0} 的大小超出了 ETW 会话对提供程序 {1} 允许的最大值
event_TrackingRecordRaised=跟踪记录 {0} 已提升为 {1}。
event_TrackingRecordTruncated=用提供程序 {1} 向 ETW 会话写入了截断的跟踪记录 {0}。已移除了变量/批注/用户数据
event_TrackingValueNotSerializable=所提取的参数/变量“{0}”不可序列化。
event_TransactedReceiveScopeEndCommitFailed=ID 为“{0}”的 CommittableTransaction 上的 EndCommit 调用引发了具有以下消息的 TransactionException:“{1}”。
event_TransactionScopeCreate=正在使用 LocalIdentifier“{0}”和 DistributedIdentifier“{1}”创建 TransactionScope。
event_TransferEmitted=发出了传输事件。
event_TransportListenerSessionsReceived=已通过中转“{0}”接收传输侦听器会话
event_TryCatchExceptionDuringCancelation=TryCatch 活动“{0}”的子活动在取消过程中引发了异常。
event_TryCatchExceptionFromCatchOrFinally=与 TryCatch 活动“{0}”关联的 Catch 或 Finally 活动引发了异常。
event_TryCatchExceptionFromTry=TryCatch 活动“{0}”捕获了“{1}”类型的异常。
event_UnhandledException=未经处理的异常。异常的详细信息: {0}
event_UnlockInstanceException=尝试解除锁定实例时遇到异常 {0}。
event_UserEvents=Name“{0}”、Reference“{1}”、Payload: {2}
event_WasCloseAllListenerChannelInstancesCompleted=正在关闭所有已完成的侦听器通道实例。
event_WasCloseAllListenerChannelInstancesFailed=错误代码: {0}
event_WasConnected=WAS 已连接。
event_WasConnectionTimedout=WAS 连接超时。
event_WasDisconnected=WAS 已断开连接。
event_WebHostRequestStart=从 AppDomain“{0}”收到了虚拟路径为“{1}”的请求。
event_WebHostRequestStop=WebHostRequest 停止。
event_WebhostUnregisterProtocolFailed=错误代码: {0}
event_WebSocketAsyncReadStart=WebSocketId:{0} 读取开始。
event_WebSocketAsyncReadStop=WebSocketId:{0} 从“{2}”读取“{1}”个字节。
event_WebSocketAsyncWriteStart=WebSocketId:{0} 正在将“{1}”个字节写入“{2}”。
event_WebSocketAsyncWriteStop=WebSocketId:{0} 异步写入停止。
event_WebSocketCloseOutputSent=WebSocketId:{0} 正在向“{1}”发送关闭输出消息，关闭状态为“{2}”。
event_WebSocketCloseSent=WebSocketId:{0} 正在向“{1}”发送关闭消息，关闭状态为“{2}”。
event_WebSocketCloseStatusReceived=收到 WebSocketId:{0} 连接关闭消息，状态为“{1}”。
event_WebSocketConnectionAborted=WebSocketId:{0} 连接已中止。
event_WebSocketConnectionAccepted=WebSocketId:{0} 连接已接受。
event_WebSocketConnectionAcceptStart=WebSocket 连接接受开始。
event_WebSocketConnectionClosed=WebSocketId:{0} 连接已关闭。
event_WebSocketConnectionDeclined=WebSocket 连接被拒绝，状态代码为“{0}”
event_WebSocketConnectionFailed=WebSocket 连接请求失败:“{0}”
event_WebSocketConnectionRequestSendStart=针对“{0}”的 WebSocket 连接请求发送开始。
event_WebSocketConnectionRequestSendStop=WebSocketId:{0} 连接请求已发送。
event_WebSocketCreateClientWebSocketWithFactory=正在创建包含类型为“{0}”的工厂的客户端 WebSocket。
event_WebSocketUseVersionFromClientWebSocketFactory=正在使用来自类型为“{0}”的客户端 WebSocket 工厂的 WebSocketVersion。
event_WfMessageReceived=工作流已接收消息
event_WfMessageSent=已从工作流发送消息
event_WindowsStreamSecurityOnAcceptUpgrade=Windows 正在对接受升级的安全性进行流式处理。
event_WindowsStreamSecurityOnInitiateUpgrade=WindowsStreamSecurity 正在启动安全升级。
event_WorkflowActivityResume=WorkflowInstance Id“{0}”E2E 活动
event_WorkflowActivityStart=WorkflowInstance Id“{0}”E2E 活动
event_WorkflowActivityStop=WorkflowInstance Id“{0}”E2E 活动
event_WorkflowActivitySuspend=WorkflowInstance Id“{0}”E2E 活动
event_WorkflowApplicationCompleted=WorkflowInstance Id“{0}”在“已关闭”状态下完成。
event_WorkflowApplicationIdled=WorkflowApplication ID“{0}”变为空闲状态。
event_WorkflowApplicationPersistableIdle=WorkflowApplication ID“{0}”空闲且可持久化。将进行以下操作: {1}。
event_WorkflowApplicationPersisted=WorkflowApplication Id“{0}”已持久化。
event_WorkflowApplicationTerminated=WorkflowApplication Id“{0}”已终止。该应用程序因出现异常而在“出错”状态下完成。
event_WorkflowApplicationUnhandledException=WorkflowInstance Id“{0}”遇到了未经处理的异常。该异常来自 Activity“{1}”、DisplayName“{2}”。将进行以下操作: {3}。
event_WorkflowApplicationUnloaded=WorkflowInstance Id“{0}”已卸载。
event_WorkflowInstanceAborted=WorkflowInstance Id“{0}”因出现异常而中止。
event_WorkflowInstanceAbortedRecordWithId=TrackRecord = WorkflowInstanceAbortedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
event_WorkflowInstanceCanceled=WorkflowInstance Id“{0}”在“已取消”状态下完成。
event_WorkflowInstanceRecordWithId=TrackRecord= WorkflowInstanceRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，State = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
event_WorkflowInstanceSuspendedRecord=TrackRecord = WorkflowInstanceSuspendedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}
event_WorkflowInstanceSuspendedRecordWithId=TrackRecord = WorkflowInstanceSuspendedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
event_WorkflowInstanceTerminatedRecord=TrackRecord = WorkflowInstanceTerminatedRecord, InstanceID = {0}, RecordNumber = {1}, EventTime = {2}, ActivityDefinitionId = {3}, Reason = {4}, Annotations = {5}, ProfileName = {6}
event_WorkflowInstanceTerminatedRecordWithId=TrackRecord = WorkflowInstanceTerminatedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，Reason = {4}，Annotations = {5}，ProfileName = {6}，WorkflowDefinitionIdentity = {7}
event_WorkflowInstanceUnhandledExceptionRecordWithId=TrackRecord = WorkflowInstanceUnhandledExceptionRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，SourceName = {4}，SourceId = {5}，SourceInstanceId = {6}，SourceTypeName={7}，Exception={8}，Annotations= {9}，ProfileName = {10}，WorkflowDefinitionIdentity = {11}
event_WorkflowInstanceUpdatedRecord=TrackRecord= WorkflowInstanceUpdatedRecord，InstanceID = {0}，RecordNumber = {1}，EventTime = {2}，ActivityDefinitionId = {3}，State = {4}，OriginalDefinitionIdentity = {5}，UpdatedDefinitionIdentity = {6}，Annotations = {7}，ProfileName = {8}
event_WrappedKeyDecryptionStart=封装的密钥解密已开始。
event_WrappedKeyDecryptionSuccess=封装的密钥解密已成功。
event_WritePoolMiss=已新建“{0}”
event_XamlServicesLoadStart=XamlServicesLoad 开始
event_XamlServicesLoadStop=XamlServicesLoad 停止
keyword_ActivationServices=激活服务
keyword_Channel=通道
keyword_Discovery=发现
keyword_EndToEndMonitoring=端对端监控
keyword_HealthMonitoring=运行状况监视
keyword_HTTP=HTTP 传输
keyword_Infrastructure=基础结构
keyword_Quota=配额
keyword_RoutingServices=路由服务
keyword_Security=安全
keyword_Serialization=序列化
keyword_ServiceHost=服务主机
keyword_ServiceModel=ServiceModel
keyword_TCP=TCP 传输
keyword_Threading=线程处理
keyword_Transaction=事务
keyword_TransportGeneral=常规传输
keyword_Troubleshooting=疑难解答
keyword_UserEvents=用户事件
keyword_WCFMessageLogging=WCF 消息日志记录
keyword_WebHost=Web 主机
keyword_WebHTTP=Web HTTP
keyword_WFActivities=工作流活动
keyword_WFInstanceStore=工作流 InstanceStore
keyword_WFRuntime=工作流运行时
keyword_WFServices=工作流 ServiceHost
keyword_WFTracking=WF 跟踪
opcode_BufferOutOfOrderNoBookmark=NoBookmark
opcode_BufferOutOfOrderNoInstance=NoInstance
opcode_BufferPoolingAllocate=分配
opcode_BufferPoolingTune=调整
opcode_ClientRuntimeClientChannelOpenStart=ClientChannelOpenStart
opcode_ClientRuntimeClientChannelOpenStop=ClientChannelOpenStop
opcode_ClientRuntimeClientMessageInspectorAfterReceiveInvoked=ClientMessageInspectorAfterReceiveInvoked
opcode_ClientRuntimeClientMessageInspectorBeforeSendInvoked=ClientMessageInspectorBeforeSendInvoked
opcode_ClientRuntimeClientParameterInspectorStart=ClientParameterInspectorStart
opcode_ClientRuntimeClientParameterInspectorStop=ClientParameterInspectorStop
opcode_ClientRuntimeOperationPrepared=OperationPrepared
opcode_CompleteWorkItemCompleteBookmark=CompleteBookmark
opcode_CompleteWorkItemCompleteCancelActivity=CompleteCancelActivity
opcode_CompleteWorkItemCompleteCompletion=CompleteCompletion
opcode_CompleteWorkItemCompleteExecuteActivity=CompleteExecuteActivity
opcode_CompleteWorkItemCompleteFault=CompleteFault
opcode_CompleteWorkItemCompleteRuntime=CompleteRuntime
opcode_CompleteWorkItemCompleteTransactionContext=CompleteTransactionContext
opcode_CorrelationDuplicateQuery=DuplicateQuery
opcode_DiscoveryClientChannelCreationFailed=CreationFailed
opcode_DiscoveryClientChannelFindInitiated=FindInitiated
opcode_DiscoveryClientChannelOpenFailed=OpenFailed
opcode_DiscoveryClientChannelOpenSucceeded=OpenSucceeded
opcode_DiscoveryClientExceptionSuppressed=ExceptionSuppressed
opcode_DiscoveryClientFailedToClose=FailedToClose
opcode_DiscoveryClientReceivedMulticastSuppression=ReceivedMulticastSuppression
opcode_DiscoveryMessageDuplicate=复制
opcode_DiscoveryMessageInvalidContent=InvalidContent
opcode_DiscoveryMessageInvalidRelatesToOrOperationCompleted=InvalidRelatesToOrOperationCompleted
opcode_DiscoveryMessageInvalidReplyTo=InvalidReplyTo
opcode_DiscoveryMessageNoContent=NoContent
opcode_DiscoveryMessageNullMessageId=NullMessageId
opcode_DiscoveryMessageNullMessageSequence=NullMessageSequence
opcode_DiscoveryMessageNullRelatesTo=NullRelatesTo
opcode_DiscoveryMessageNullReplyTo=NullReplyTo
opcode_DiscoveryMessageReceivedAfterOperationCompleted=ReceivedAfterOperationCompleted
opcode_DiscoverySynchronizationContextReset=重置
opcode_DiscoverySynchronizationContextSetToNull=SetToNull
opcode_DispatchMessageBeforeAuthorization=BeforeAuthorization
opcode_DispatchMessageDispatchStart=DispatchStart
opcode_DispatchMessageDispatchStop=DispatchStop
opcode_DispatchMessageDispathMessageInspectorAfterReceiveInvoked=DispathMessageInspectorAfterReceiveInvoked
opcode_DispatchMessageDispathMessageInspectorBeforeSendInvoked=DispathMessageInspectorBeforeSendInvoked
opcode_DispatchMessageOperationInvokerStart=OperationInvokerStart
opcode_DispatchMessageOperationInvokerStop=OperationInvokerStop
opcode_DispatchMessageParameterInspectorStart=ParameterInspectorStart
opcode_DispatchMessageParameterInspectorStop=ParameterInspectorStop
opcode_DispatchMessageTransactionScopeCreate=TransactionScopeCreate
opcode_EndpointDiscoverabilityDisabled=已禁用
opcode_EndpointDiscoverabilityEnabled=已启用
opcode_ExecuteFlowchartBegin=开始
opcode_ExecuteFlowchartEmpty=空
opcode_ExecuteFlowchartNextNull=NextNull
opcode_ExecuteFlowchartSwitchCase=SwitchCase
opcode_ExecuteFlowchartSwitchCaseNotFound=SwitchCaseNotFound
opcode_ExecuteFlowchartSwitchDefault=SwitchDefault
opcode_ExpressionResultArrayItemValue=ArrayItemValue
opcode_ExpressionResultBinary=二进制
opcode_ExpressionResultMemberAccess=MemberAccess
opcode_ExpressionResultUnary=一元
opcode_InferDescriptionContract=协定
opcode_InferDescriptionOperation=操作
opcode_InvokeMethodDoesNotUseAsyncPattern=DoesNotUseAsyncPattern
opcode_InvokeMethodIsNotStatic=IsNotStatic
opcode_InvokeMethodIsStatic=IsStatic
opcode_InvokeMethodThrewException=ThrewException
opcode_InvokeMethodUseAsyncPattern=UseAsyncPattern
opcode_MessageChannelCacheMissed=已丢失
opcode_ReliableSessionFaulted=出错
opcode_ReliableSessionReconnect=重新连接
opcode_ReliableSessionSequenceAck=SequenceAck
opcode_RoutingServiceAbortingChannel=AbortingChannel
opcode_RoutingServiceClientChannelFaulted=ChannelFaulted
opcode_RoutingServiceClientClosing=正在关闭
opcode_RoutingServiceClientCreatingForEndpoint=CreatingForEndpoint
opcode_RoutingServiceCloseFailed=CloseFailed
opcode_RoutingServiceConfigurationApplied=ConfigurationApplied
opcode_RoutingServiceDuplexCallbackException=DuplexCallbackException
opcode_RoutingServiceHandledException=HandledException
opcode_RoutingServiceMessageCompletingOneWay=CompletingOneWay
opcode_RoutingServiceMessageCompletingTwoWay=CompletingTwoWay
opcode_RoutingServiceMessageMovedToBackup=MovedToBackup
opcode_RoutingServiceMessageProcessingFailure=ProcessingFailure
opcode_RoutingServiceMessageProcessingMessage=ProcessingMessage
opcode_RoutingServiceMessageRoutedToEndpoints=RoutedToEndpoints
opcode_RoutingServiceMessageSendingFaultResponse=SendingFaultResponse
opcode_RoutingServiceMessageSendingResponse=SendingResponse
opcode_RoutingServiceMessageTransmitSucceeded=TransmitSucceeded
opcode_RoutingServiceMessageTransmittingMessage=TransmittingMessage
opcode_RoutingServiceReceiveContextAbandoning=正在放弃
opcode_RoutingServiceReceiveContextCompleting=正在完成
opcode_RoutingServiceTransactionCommittingTransaction=CommittingTransaction
opcode_RoutingServiceTransactionCreating=正在创建
opcode_RoutingServiceTransactionUsingExisting=UsingExisting
opcode_RoutingServiceTransmitFailed=TransmitFailed
opcode_RuntimeTransactionComplete=完成
opcode_RuntimeTransactionCompletionRequested=CompletionRequested
opcode_RuntimeTransactionSet=设置
opcode_ScheduleWorkItemScheduleBookmark=ScheduleBookmark
opcode_ScheduleWorkItemScheduleCancelActivity=ScheduleCancelActivity
opcode_ScheduleWorkItemScheduleCompletion=ScheduleCompletion
opcode_ScheduleWorkItemScheduleExecuteActivity=ScheduleExecuteActivity
opcode_ScheduleWorkItemScheduleFault=ScheduleFault
opcode_ScheduleWorkItemScheduleRuntime=ScheduleRuntime
opcode_ScheduleWorkItemScheduleTransactionContext=ScheduleTransactionContext
opcode_SessionUpgradeAccept=接受
opcode_SessionUpgradeInitiate=启动
opcode_Signpostsuspend=挂起
opcode_StartWorkItemStartBookmark=StartBookmark
opcode_StartWorkItemStartCancelActivity=StartCancelActivity
opcode_StartWorkItemStartCompletion=StartCompletion
opcode_StartWorkItemStartExecuteActivity=StartExecuteActivity
opcode_StartWorkItemStartFault=StartFault
opcode_StartWorkItemStartRuntime=StartRuntime
opcode_StartWorkItemStartTransactionContext=StartTransactionContext
opcode_TrackingProfileNotFound=NotFound
opcode_TrackingRecordDropped=已删除
opcode_TrackingRecordRaised=已引发
opcode_TrackingRecordTruncated=已截断
opcode_TransportReceiveBeforeAuthentication=BeforeAuthentication
opcode_TryCatchExceptionDuringCancelation=DuringCancelation
opcode_TryCatchExceptionFromCatchOrFinally=FromCatchOrFinally
opcode_TryCatchExceptionFromTry=FromTry
opcode_WASActivationConnected=已连接
opcode_WASActivationDisconnect=断开连接
opcode_WFApplicationStateChangeCompleted=已完成
opcode_WFApplicationStateChangeIdled=空闲
opcode_WFApplicationStateChangeInstanceAborted=InstanceAborted
opcode_WFApplicationStateChangeInstanceCanceled=InstanceCanceled
opcode_WFApplicationStateChangePersistableIdle=PersistableIdle
opcode_WFApplicationStateChangePersisted=已保留
opcode_WFApplicationStateChangeTerminated=已终止
opcode_WFApplicationStateChangeUnhandledException=UnhandledException
opcode_WFApplicationStateChangeUnloaded=已卸载
opcode_WorkflowActivitysuspend=挂起
opcode_WorkflowInstanceRecordAbortedRecord=AbortedRecord
opcode_WorkflowInstanceRecordAbortedWithId=AbortedWithId
opcode_WorkflowInstanceRecordSuspendedRecord=SuspendedRecord
opcode_WorkflowInstanceRecordSuspendedWithId=SuspendedWithId
opcode_WorkflowInstanceRecordTerminatedRecord=TerminatedRecord
opcode_WorkflowInstanceRecordTerminatedWithId=TerminatedWithId
opcode_WorkflowInstanceRecordUnhandledExceptionRecord=UnhandledExceptionRecord
opcode_WorkflowInstanceRecordUnhandledExceptionWithId=UnhandledExceptionWithId
opcode_WorkflowInstanceRecordUpdatedRecord=UpdatedRecord
task_ActivationDispatchSession=ActivationDispatchSession
task_ActivationDuplicateSocket=ActivationDuplicateSocket
task_ActivationListenerOpen=ActivationListenerOpen
task_ActivationPipeListenerListening=ActivationPipeListenerListening
task_ActivationRoutingTableLookup=ActivationRoutingTableLookup
task_ActivationServiceStart=ActivationServiceStart
task_ActivationTcpListenerListening=ActivationTcpListenerListening
task_AddServiceEndpoint=AddServiceEndpoint
task_BufferOutOfOrder=BufferOutOfOrder
task_BufferPooling=BufferPooling
task_CacheRootMetadata=CacheRootMetadata
task_ChannelFactoryCaching=ChannelFactoryCaching
task_ChannelFactoryCreate=ChannelFactoryCreate
task_ChannelReceive=ChannelReceive
task_ClientRuntime=ClientRuntime
task_ClientSendPreamble=ClientSendPreamble
task_CompensationState=CompensationState
task_CompleteActivity=CompleteActivity
task_CompleteWorkItem=CompleteWorkItem
task_Connect=连接
task_ConnectionAbort=ConnectionAbort
task_ConnectionAccept=ConnectionAccept
task_ConnectionPooling=ConnectionPooling
task_Correlation=关联
task_CreateBookmark=CreateBookmark
task_CreateHttpMessageHandler=CreateHttpMessageHandler
task_CreateWorkflowServiceHost=CreateWorkflowServiceHost
task_CustomTrackingRecord=CustomTrackingRecord
task_DataContractResolver=DataContractResolver
task_DiscoveryClient=DiscoveryClient
task_DiscoveryClientChannel=DiscoveryClientChannel
task_DiscoveryMessage=DiscoveryMessage
task_DiscoverySynchronizationContext=DiscoverySynchronizationContext
task_DispatchMessage=DispatchMessage
task_EncryptedDataProcessing=EncryptedDataProcessing
task_EndpointDiscoverability=EndpointDiscoverability
task_ExecuteActivity=ExecuteActivity
task_ExecuteFlowchart=ExecuteFlowchart
task_ExecuteWorkItem=ExecuteWorkItem
task_ExpressionResult=ExpressionResult
task_FederationMessageCreation=FederationMessageCreation
task_FederationMessageProcessing=FederationMessageProcessing
task_FormatterDeserializeReply=FormatterDeserializeReply
task_FormatterDeserializeRequest=FormatterDeserializeRequest
task_FormatterSerializeReply=FormatterSerializeReply
task_FormatterSerializeRequest=FormatterSerializeRequest
task_GenerateDeserializer=GenerateDeserializer
task_GenerateSerializer=GenerateSerializer
task_GenerateXmlSerializable=GenerateXmlSerializable
task_GetIssuerName=GetIssuerName
task_HostedTransportConfigurationManagerConfigInit=HostedTransportConfigurationManagerConfigInit
task_ImportKnownType=ImportKnownType
task_InferDescription=InferDescription
task_InitializeBookmarkScope=InitializeBookmarkScope
task_InternalCacheMetadata=InternalCacheMetadata
task_InvokeMethod=InvokeMethod
task_ListenerOpen=ListenerOpen
task_LockWorkflowInstance=LockWorkflowInstance
task_MessageChannelCache=MessageChannelCache
task_MessageDecoding=MessageDecoding
task_MessageEncoding=MessageEncoding
task_MessageQueueRegister=MessageQueueRegister
task_MsmqQuotas=MsmqQuotas
task_NoPersistBlock=NoPersistBlock
task_PrincipalSetting=PrincipalSetting
task_Quotas=配额
task_ReliableSession=ReliableSession
task_RoutingService=RoutingService
task_RoutingServiceClient=RoutingServiceClient
task_RoutingServiceFilterTableMatch=RoutingServiceFilterTableMatch
task_RoutingServiceMessage=RoutingServiceMessage
task_RoutingServiceReceiveContext=RoutingServiceReceiveContext
task_RoutingServiceTransaction=RoutingServiceTransaction
task_RuntimeTransaction=RuntimeTransaction
task_ScheduleActivity=ScheduleActivity
task_ScheduleWorkItem=ScheduleWorkItem
task_SecureMessage=SecureMessage
task_SecurityImpersonation=SecurityImpersonation
task_SecurityNegotiation=SecurityNegotiation
task_SecurityVerification=SecurityVerification
task_ServiceActivation=ServiceActivation
task_ServiceChannelCall=ServiceChannelCall
task_ServiceChannelOpen=ServiceChannelOpen
task_ServiceHostActivation=ServiceHostActivation
task_ServiceHostCompilation=ServiceHostCompilation
task_ServiceHostCreate=ServiceHostCreate
task_ServiceHostFactoryCreation=ServiceHostFactoryCreation
task_ServiceHostFault=ServiceHostFault
task_ServiceHostOpen=ServiceHostOpen
task_ServiceInstance=ServiceInstance
task_ServiceShutdown=ServiceShutdown
task_SessionCookieReading=SessionCookieReading
task_SessionStart=SessionStart
task_SessionUpgrade=SessionUpgrade
task_SignatureVerification=SignatureVerification
task_Signpost=Signpost
task_SqlCommandExecute=SqlCommandExecute
task_StartWorkItem=StartWorkItem
task_SurrogateDeserialize=SurrogateDeserialize
task_SurrogateSerialize=SurrogateSerialize
task_ThreadScheduling=ThreadScheduling
task_Throttles=限制
task_Timeout=超时
task_TimeoutException=TimeoutException
task_TokenValidation=TokenValidation
task_TrackingProfile=TrackingProfile
task_TrackingRecord=TrackingRecord
task_TransportReceive=TransportReceive
task_TransportSend=TransportSend
task_TryCatchException=TryCatchException
task_VBExpressionCompile=VBExpressionCompile
task_WASActivation=WASActivation
task_WebHostRequest=WebHostRequest
task_WFApplicationStateChange=WFApplicationStateChange
task_WFMessage=WFMessage
task_WorkflowActivity=WorkflowActivity
task_WorkflowInstanceRecord=WorkflowInstanceRecord
task_WorkflowTracking=WorkflowTracking
task_WrappedKeyDecryption=WrappedKeyDecryption
task_XamlServicesLoad=xamlServicesLoad
